{"ts":1352707186211,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":4006}]],"length":4006}
{"contributors":[],"silentsave":false,"ts":1352707186152,"patch":[[{"diffs":[[1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":4006}]],"length":4006,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353092428815,"patch":[[{"diffs":[[0,"\r\n*/"],[-1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":4002,"start2":4002,"length1":4010,"length2":4}]],"length":4006,"saved":false}
{"ts":1353093317023,"patch":[[{"diffs":[[0,"ude "],[-1,"<"],[1,"\""],[0,"my.h"]],"start1":7,"start2":7,"length1":9,"length2":9}]],"length":4006,"saved":false}
{"ts":1353093318625,"patch":[[{"diffs":[[0,"my.h"],[-1,">"],[1,"\""],[0,"\r\n\r\n"]],"start1":12,"start2":12,"length1":9,"length2":9}]],"length":4006,"saved":false}
{"ts":1353093562652,"patch":[[{"diffs":[[0,"Book(uin"],[1,"t"],[0,"16 netwo"]],"start1":999,"start2":999,"length1":16,"length2":17}]],"length":4007,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353098116009,"patch":[[{"diffs":[[0,"ss);\r\n\r\n"],[1,"\r\n\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\n"],[0,"/*\r\n// R"]],"start1":1275,"start2":1275,"length1":16,"length2":81}]],"length":4072,"saved":false}
{"ts":1353098117271,"patch":[[{"diffs":[[0,"cale);\r\n"],[1,"\r\n"],[0,"/*\r\n// R"]],"start1":1340,"start2":1340,"length1":16,"length2":18}]],"length":4074,"saved":false}
{"ts":1353098120868,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\n\r\n"],[0,"/*\r\n"]],"start1":1279,"start2":1279,"length1":75,"length2":8}]],"length":4007,"saved":false}
{"ts":1353098123280,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/*"],[0,"\r\n//"]],"start1":1279,"start2":1279,"length1":10,"length2":8}]],"length":4005,"saved":false}
{"ts":1353098124838,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"*/"]],"start1":3999,"start2":3999,"length1":6,"length2":4}]],"length":4003,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353099958794,"patch":[[{"diffs":[[0,"int8 *capabilities);\r\n    \r\n"],[1,"// Writes a list of all nodes in the network to the passed in pointer\r\nvoid nodesInAddressBook(uint16 *networkAddresses);\r\n\r\n// Returns the number of interests a node has\r\nuint8 numNodeInterests(uint16 networkAddress);\r\n\r\n// Writes a list of interests a node has to the passed in pointer\r\nvoid nodeInterests(uint8 *interests, uint16 networkAddress);\r\n\r\n"]],"start1":3975,"start2":3975,"length1":28,"length2":381}]],"length":4356,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353531648093,"patch":[[{"diffs":[[0,"locale);\r\n\r\n"],[1,"\r\n"],[0,"// Returns a"]],"start1":1719,"start2":1719,"length1":24,"length2":26}]],"length":4358,"saved":false}
{"ts":1353531661609,"patch":[[{"diffs":[[0,"8 locale);\r\n\r\n\r\n"],[1,"\r\n"],[0,"// Returns a cou"]],"start1":1717,"start2":1717,"length1":32,"length2":34}]],"length":4360,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353833788769,"patch":[[{"diffs":[[0,"rests(uint8 "],[-1,"numLocales"],[0,", uint8 *loc"]],"start1":2229,"start2":2229,"length1":34,"length2":24}]],"length":4350,"saved":false}
{"ts":1353833789943,"patch":[[{"diffs":[[0,"\r\n    uint8 "],[-1,"numInterests"],[0,", uint8 *int"]],"start1":2259,"start2":2259,"length1":36,"length2":24}]],"length":4338,"saved":false}
{"ts":1353833791307,"patch":[[{"diffs":[[0,"rests(uint8 "],[1,"numInterests"],[0,", uint8 *loc"]],"start1":2229,"start2":2229,"length1":24,"length2":36}]],"length":4350,"saved":false}
{"ts":1353833792912,"patch":[[{"diffs":[[0,"    "],[-1,"uint8 ,"],[0," uin"]],"start1":2273,"start2":2273,"length1":15,"length2":8}]],"length":4343,"saved":false}
{"ts":1353833794092,"patch":[[{"diffs":[[0,", \r\n    "],[-1," "],[0,"uint8 *i"]],"start1":2269,"start2":2269,"length1":17,"length2":16}]],"length":4342,"saved":false}
{"ts":1353833801901,"patch":[[{"diffs":[[0,"\r\n    uint8 "],[-1,"numCapabilities"],[0,", uint8 *cap"]],"start1":2443,"start2":2443,"length1":39,"length2":24}]],"length":4327,"saved":false}
{"ts":1353833803592,"patch":[[{"diffs":[[0,"lities(uint8 num"],[-1,"Local"],[1,"Capabiliti"],[0,"es, uint8 *local"]],"start1":2402,"start2":2402,"length1":37,"length2":42}]],"length":4332,"saved":false}
{"ts":1353833805566,"patch":[[{"diffs":[[0,"\n   "],[-1," uint8 ,"],[0," uin"]],"start1":2449,"start2":2449,"length1":16,"length2":8}]],"length":4324,"saved":false}
{"ts":1353834183833,"patch":[[{"diffs":[[0,"etworkAddresses,"],[-1," "],[0,"uint8 numLocales"]],"start1":3722,"start2":3722,"length1":33,"length2":32},{"diffs":[[0,"es,uint8 num"],[-1,"Locales,\r\n   "],[1,"Interests,"],[0," uint8 *loca"]],"start1":3735,"start2":3735,"length1":37,"length2":34},{"diffs":[[0,"ocales, "],[-1,"uint8 numInterests,"],[1,"\r\n   "],[0," uint8 *"]],"start1":3766,"start2":3766,"length1":35,"length2":21}]],"length":4306,"saved":false}
{"ts":1353834186633,"patch":[[{"diffs":[[0,"dresses,"],[1," "],[0,"uint8 nu"]],"start1":3730,"start2":3730,"length1":16,"length2":17}]],"length":4307,"saved":false}
{"ts":1353834188687,"patch":[[{"diffs":[[0,"8 numInterests, "],[1,"\r\n    "],[0,"uint8 *locales, "]],"start1":3743,"start2":3743,"length1":32,"length2":38},{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *interests"]],"start1":3765,"start2":3765,"length1":38,"length2":32}]],"length":4307,"saved":false}
{"ts":1353834207910,"patch":[[{"diffs":[[0," num"],[-1,"Locales,\r\n   "],[1,"Capabilities,"],[0," uin"]],"start1":3868,"start2":3868,"length1":21,"length2":21},{"diffs":[[0,"ocales, "],[-1,"uint8 numCapabilities,"],[1,"\r\n   "],[0," uint8 *"]],"start1":3894,"start2":3894,"length1":38,"length2":21}]],"length":4290,"saved":false}
{"ts":1353834211171,"patch":[[{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *capabilit"]],"start1":3886,"start2":3886,"length1":38,"length2":32}]],"length":4284,"saved":false}
{"ts":1353834215363,"patch":[[{"diffs":[[0,"tworkAddresses, "],[1,"\r\n    "],[0,"uint8 numCapabil"]],"start1":3847,"start2":3847,"length1":32,"length2":38}]],"length":4290,"saved":false}
{"ts":1353835508760,"patch":[[{"diffs":[[0,"nterests);\r\n"],[1,"void nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *locales, uint8 *interests);\r\n"],[0,"void nodesIn"]],"start1":3789,"start2":3789,"length1":24,"length2":145}]],"length":4411,"saved":false}
{"ts":1353835511539,"patch":[[{"diffs":[[0,"id nodesInLocale"],[-1,"s"],[0,"WithInterests(ui"]],"start1":3682,"start2":3682,"length1":33,"length2":32}]],"length":4410,"saved":false}
{"ts":1353835516727,"patch":[[{"diffs":[[0,"ts, \r\n    uint8 "],[-1,"*"],[0,"locales, uint8 *"]],"start1":3754,"start2":3754,"length1":33,"length2":32}]],"length":4409,"saved":false}
{"ts":1353835518255,"patch":[[{"diffs":[[0,"uint8 locale"],[-1,"s"],[0,", uint8 *int"]],"start1":3764,"start2":3764,"length1":25,"length2":24}]],"length":4408,"saved":false}
{"ts":1353835605268,"patch":[[{"diffs":[[0,"t8 *interests);\r"],[1,"\nvoid nodesInLocaleWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 locale, uint8 *interests);\r"],[0,"\n\r\n// Returns a "]],"start1":2280,"start2":2280,"length1":32,"length2":150}]],"length":4526,"saved":false}
{"ts":1353835608498,"patch":[[{"diffs":[[0,"8 *interests);\r\n"],[-1,"void"],[1,"uint8"],[0," nodesInLocaleWi"]],"start1":2281,"start2":2281,"length1":36,"length2":37}]],"length":4527,"saved":false}
{"ts":1353835611049,"patch":[[{"diffs":[[0,"\nuint8 n"],[1,"umN"],[0,"odesInLo"]],"start1":2296,"start2":2296,"length1":16,"length2":19}]],"length":4530,"saved":false}
{"ts":1353835617661,"patch":[[{"diffs":[[0,"sts("],[-1,"uint16 *networkAddresses, "],[0,"uint"]],"start1":2329,"start2":2329,"length1":34,"length2":8}]],"length":4504,"saved":false}
{"ts":1353835621281,"patch":[[{"diffs":[[0,"8 numInterests, "],[-1,"\r\n    "],[0,"uint8 locale, ui"]],"start1":2337,"start2":2337,"length1":38,"length2":32}]],"length":4498,"saved":false}
{"ts":1353835623262,"patch":[[{"diffs":[[0,", uint8 locale, "],[1,"\r\n    "],[0,"uint8 *interests"]],"start1":2351,"start2":2351,"length1":32,"length2":38}]],"length":4504,"saved":false}
{"ts":1353835899681,"patch":[[{"diffs":[[0,"odesInLocale"],[-1,"WithInterests"],[0,"(uint8 numIn"]],"start1":2307,"start2":2307,"length1":37,"length2":24}]],"length":4491,"saved":false}
{"ts":1353835902698,"patch":[[{"diffs":[[0,"\r\nuint8 numNodes"],[1,"WithInterests"],[0,"InLocale(uint8 n"]],"start1":2295,"start2":2295,"length1":32,"length2":45}]],"length":4504,"saved":false}
{"ts":1353835913127,"patch":[[{"diffs":[[0,"capabilities);\r\n"],[1,"uint8 numNodesWithInterestsInLocale(uint8 numInterests, uint8 locale, \r\n    uint8 *interests);\r\n"],[0,"    \r\n// Populat"]],"start1":2557,"start2":2557,"length1":32,"length2":128}]],"length":4600,"saved":false}
{"ts":1353835921555,"patch":[[{"diffs":[[0,"sWithInterestsIn"],[-1,"Locale"],[1,"Capabilities"],[0,"(uint8 numIntere"]],"start1":2586,"start2":2586,"length1":38,"length2":44}]],"length":4606,"saved":false}
{"ts":1353835924770,"patch":[[{"diffs":[[0,"es(uint8 num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s, uint8 loc"]],"start1":2612,"start2":2612,"length1":32,"length2":35}]],"length":4609,"saved":false}
{"ts":1353835928665,"patch":[[{"diffs":[[0,"\n    uint8 *"],[-1,"interest"],[1,"Capabilitie"],[0,"s);\r\n    \r\n/"]],"start1":2653,"start2":2653,"length1":32,"length2":35}]],"length":4612,"saved":false}
{"ts":1353835930692,"patch":[[{"diffs":[[0," uint8 *"],[-1,"C"],[1,"c"],[0,"apabilit"]],"start1":2657,"start2":2657,"length1":17,"length2":17}]],"length":4612,"saved":false}
{"ts":1353835956625,"patch":[[{"diffs":[[0,"odesWith"],[-1,"Interest"],[1,"Capabilitie"],[0,"sInCapab"]],"start1":2583,"start2":2583,"length1":24,"length2":27}]],"length":4615,"saved":false}
{"ts":1353835961157,"patch":[[{"diffs":[[0,"litiesIn"],[-1,"Capabilities"],[1,"Locale"],[0,"(uint8 n"]],"start1":2597,"start2":2597,"length1":28,"length2":22}]],"length":4609,"saved":false}
{"ts":1353835996414,"patch":[[{"diffs":[[0,"\r\nvoid n"],[1,"umN"],[0,"odes"],[-1,"InLocale"],[0,"WithInte"]],"start1":3879,"start2":3879,"length1":28,"length2":23},{"diffs":[[0,"desWithInterests"],[1,"InLocale"],[0,"(uint16 *network"]],"start1":3891,"start2":3891,"length1":32,"length2":40}]],"length":4612,"saved":false}
{"ts":1353836003364,"patch":[[{"diffs":[[0,"8 *interests);\r\n"],[1,"uint8 numNodesWithCapabilitiesInLocale(uint8 numCapabilities, uint8 locale, \r\n    uint8 *capabilities);\r\n"],[0,"void nodesInLoca"]],"start1":4107,"start2":4107,"length1":32,"length2":137}]],"length":4717,"saved":false}
{"ts":1353836008286,"patch":[[{"diffs":[[0,"8 *interests);\r\n"],[-1,"uint8"],[1,"void"],[0," numNodesWithCap"]],"start1":4107,"start2":4107,"length1":37,"length2":36}]],"length":4716,"saved":false}
{"ts":1353836013439,"patch":[[{"diffs":[[0,"umCapabilities, "],[1,"\r\n    "],[0,"uint8 locale, \r\n"]],"start1":4168,"start2":4168,"length1":32,"length2":38}]],"length":4722,"saved":false}
{"ts":1353836021450,"patch":[[{"diffs":[[0,"ilitiesInLocale("],[1,"uint16 *networkAddresses, "],[0,"uint8 numCapabil"]],"start1":4145,"start2":4145,"length1":32,"length2":58}]],"length":4748,"saved":false}
{"ts":1353836023513,"patch":[[{"diffs":[[0,"tworkAddresses, "],[1,"\r\n    "],[0,"uint8 numCapabil"]],"start1":4171,"start2":4171,"length1":32,"length2":38}]],"length":4754,"saved":false}
{"ts":1353836024116,"patch":[[{"diffs":[[0,"umCapabilities, "],[-1,"\r\n"],[0,"    uint8 locale"]],"start1":4200,"start2":4200,"length1":34,"length2":32}]],"length":4752,"saved":false}
{"ts":1353836024830,"patch":[[{"diffs":[[0,"ies,    "],[-1," "],[0,"uint8 lo"]],"start1":4211,"start2":4211,"length1":17,"length2":16}]],"length":4751,"saved":false}
{"ts":1353836025592,"patch":[[{"diffs":[[0,"ilities,"],[-1,"  "],[0,"  uint8 "]],"start1":4207,"start2":4207,"length1":18,"length2":16}]],"length":4749,"saved":false}
{"ts":1353836026853,"patch":[[{"diffs":[[0,"ilities,"],[-1," "],[0," uint8 l"]],"start1":4207,"start2":4207,"length1":17,"length2":16},{"diffs":[[0,", uint8 locale, "],[-1,"\r\n"],[0,"    uint8 *capab"]],"start1":4214,"start2":4214,"length1":34,"length2":32}]],"length":4746,"saved":false}
{"ts":1353836027447,"patch":[[{"diffs":[[0,"cale,   "],[-1,"  "],[0,"uint8 *c"]],"start1":4224,"start2":4224,"length1":18,"length2":16}]],"length":4744,"saved":false}
{"ts":1353836029146,"patch":[[{"diffs":[[0," locale,"],[-1,"  "],[0," uint8 *"]],"start1":4221,"start2":4221,"length1":18,"length2":16}]],"length":4742,"saved":false}
{"ts":1353836038592,"patch":[[{"diffs":[[0,"erests);\r\nvoid n"],[-1,"umN"],[0,"odesWithCapabili"]],"start1":4113,"start2":4113,"length1":35,"length2":32}]],"length":4739,"saved":false}
{"ts":1353836314431,"patch":[[{"diffs":[[0,"ress);\r\n\r\n\r\n"],[1,"\r\n"],[0,"// Returns a"]],"start1":1273,"start2":1273,"length1":24,"length2":26}]],"length":4741,"saved":false}
{"ts":1353836315775,"patch":[[{"diffs":[[0,"ddress);\r\n\r\n"],[1,"//"],[0,"\r\n\r\n// Retur"]],"start1":1271,"start2":1271,"length1":24,"length2":26}]],"length":4743,"saved":false}
{"ts":1353836318001,"patch":[[{"diffs":[[0,");\r\n\r\n//"],[1," Gets"],[0,"\r\n\r\n// R"]],"start1":1277,"start2":1277,"length1":16,"length2":21}]],"length":4748,"saved":false}
{"ts":1353836318641,"patch":[[{"diffs":[[0,"\n// Gets"],[1," a"],[0,"\r\n\r\n// R"]],"start1":1282,"start2":1282,"length1":16,"length2":18}]],"length":4750,"saved":false}
{"ts":1353836319570,"patch":[[{"diffs":[[0,"/ Gets a"],[1," "],[0,"\r\n\r\n// R"]],"start1":1284,"start2":1284,"length1":16,"length2":17}]],"length":4751,"saved":false}
{"ts":1353836325281,"patch":[[{"diffs":[[0," Gets a "],[1,"pointer to a struct for the given address\r\n"],[0,"\r\n\r\n// R"]],"start1":1285,"start2":1285,"length1":16,"length2":59}]],"length":4794,"saved":false}
{"ts":1353836326585,"patch":[[{"diffs":[[0,"ddress\r\n"],[1,"u"],[0,"\r\n\r\n// R"]],"start1":1328,"start2":1328,"length1":16,"length2":17}]],"length":4795,"saved":false}
{"ts":1353836327607,"patch":[[{"diffs":[[0,"ddress\r\n"],[-1,"u"],[0,"\r\n\r\n// R"]],"start1":1328,"start2":1328,"length1":17,"length2":16}]],"length":4794,"saved":false}
{"ts":1353836332460,"patch":[[{"diffs":[[0,"ddress\r\n"],[1,"address_entry *"],[0,"\r\n\r\n// R"]],"start1":1328,"start2":1328,"length1":16,"length2":31}]],"length":4809,"saved":false}
{"ts":1353836334299,"patch":[[{"diffs":[[0,"_entry *"],[1,"g"],[0,"\r\n\r\n// R"]],"start1":1343,"start2":1343,"length1":16,"length2":17}]],"length":4810,"saved":false}
{"ts":1353836335825,"patch":[[{"diffs":[[0,"entry *g"],[1,"etP"],[0,"\r\n\r\n// R"]],"start1":1344,"start2":1344,"length1":16,"length2":19}]],"length":4813,"saved":false}
{"ts":1353836339042,"patch":[[{"diffs":[[0,"try *get"],[-1,"P"],[1,"Struc"],[0,"\r\n\r\n// R"]],"start1":1346,"start2":1346,"length1":17,"length2":21}]],"length":4817,"saved":false}
{"ts":1353836341765,"patch":[[{"diffs":[[0,"*get"],[-1,"Struc"],[1,"Message"],[0,"\r\n\r\n"]],"start1":1350,"start2":1350,"length1":13,"length2":15}]],"length":4819,"saved":false}
{"ts":1353836348282,"patch":[[{"diffs":[[0,"*get"],[-1,"Message"],[1,"AddressEntryPointer"],[0,"\r\n\r\n"]],"start1":1350,"start2":1350,"length1":15,"length2":27}]],"length":4831,"saved":false}
{"ts":1353836351309,"patch":[[{"diffs":[[0,"yPointer"],[1,"()"],[0,"\r\n\r\n// R"]],"start1":1365,"start2":1365,"length1":16,"length2":18}]],"length":4833,"saved":false}
{"ts":1353836353576,"patch":[[{"diffs":[[0,"Pointer("],[1,"uint16 "],[0,")\r\n\r\n// "]],"start1":1366,"start2":1366,"length1":16,"length2":23}]],"length":4840,"saved":false}
