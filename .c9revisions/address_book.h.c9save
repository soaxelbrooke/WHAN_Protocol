{"ts":1352707186211,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":4006}]],"length":4006}
{"contributors":[],"silentsave":false,"ts":1352707186152,"patch":[[{"diffs":[[1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":4006}]],"length":4006,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353092428815,"patch":[[{"diffs":[[0,"\r\n*/"],[-1,"\r\n#include <my.h>\r\n\r\ntypedef struct\r\n{\r\n    uint16 networkAddress;\r\n    uint32 macHi;\r\n    uint32 macLow;\r\n    uint8 locale;\r\n    uint8 numInterests;\r\n    uint8 interests[MY_ADDRESS_BOOK_INTEREST_LIMIT];\r\n    uint8 numCapabilities;\r\n    uint8 capabilities[MY_ADDRESS_BOOK_CAPABILITY_LIMIT];\r\n    \r\n} address_entry;\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities);\r\n\r\n// Remove a node form the address book\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress);\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void);\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressEntries(void);\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress);\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress);\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress);\r\n\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest);\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":4002,"start2":4002,"length1":4010,"length2":4}]],"length":4006,"saved":false}
{"ts":1353093317023,"patch":[[{"diffs":[[0,"ude "],[-1,"<"],[1,"\""],[0,"my.h"]],"start1":7,"start2":7,"length1":9,"length2":9}]],"length":4006,"saved":false}
{"ts":1353093318625,"patch":[[{"diffs":[[0,"my.h"],[-1,">"],[1,"\""],[0,"\r\n\r\n"]],"start1":12,"start2":12,"length1":9,"length2":9}]],"length":4006,"saved":false}
{"ts":1353093562652,"patch":[[{"diffs":[[0,"Book(uin"],[1,"t"],[0,"16 netwo"]],"start1":999,"start2":999,"length1":16,"length2":17}]],"length":4007,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353098116009,"patch":[[{"diffs":[[0,"ss);\r\n\r\n"],[1,"\r\n\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\n"],[0,"/*\r\n// R"]],"start1":1275,"start2":1275,"length1":16,"length2":81}]],"length":4072,"saved":false}
{"ts":1353098117271,"patch":[[{"diffs":[[0,"cale);\r\n"],[1,"\r\n"],[0,"/*\r\n// R"]],"start1":1340,"start2":1340,"length1":16,"length2":18}]],"length":4074,"saved":false}
{"ts":1353098120868,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\n\r\n"],[0,"/*\r\n"]],"start1":1279,"start2":1279,"length1":75,"length2":8}]],"length":4007,"saved":false}
{"ts":1353098123280,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"/*"],[0,"\r\n//"]],"start1":1279,"start2":1279,"length1":10,"length2":8}]],"length":4005,"saved":false}
{"ts":1353098124838,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"*/"]],"start1":3999,"start2":3999,"length1":6,"length2":4}]],"length":4003,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353099958794,"patch":[[{"diffs":[[0,"int8 *capabilities);\r\n    \r\n"],[1,"// Writes a list of all nodes in the network to the passed in pointer\r\nvoid nodesInAddressBook(uint16 *networkAddresses);\r\n\r\n// Returns the number of interests a node has\r\nuint8 numNodeInterests(uint16 networkAddress);\r\n\r\n// Writes a list of interests a node has to the passed in pointer\r\nvoid nodeInterests(uint8 *interests, uint16 networkAddress);\r\n\r\n"]],"start1":3975,"start2":3975,"length1":28,"length2":381}]],"length":4356,"saved":false}
