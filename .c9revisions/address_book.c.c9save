{"ts":1352707164306,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":7157}]],"length":7157}
{"contributors":[],"silentsave":false,"ts":1352707164247,"patch":[[{"diffs":[[1,"\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":7157}]],"length":7157,"saved":false}
{"contributors":[],"silentsave":true,"ts":1352771206068,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n"],[0,"// "],[-1,"Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n"],[0,"\r\n\r\n"]],"start1":82,"start2":82,"length1":7163,"length2":11}]],"length":7162,"saved":false}
{"ts":1352771209673,"patch":[[{"diffs":[[0,"]\r\n\r\n// "],[1,"TODO: make"],[0,"\r\n\r\n// A"]],"start1":81,"start2":81,"length1":16,"length2":26}]],"length":7172,"saved":false}
{"ts":1352771217761,"patch":[[{"diffs":[[0,"DO: make"],[1," some mechanism for storing this in non-volatile "],[0,"\r\n\r\n// A"]],"start1":91,"start2":91,"length1":16,"length2":65}]],"length":7221,"saved":false}
{"ts":1352771220113,"patch":[[{"diffs":[[0,"olatile "],[1,"memory!"],[0,"\r\n\r\n// A"]],"start1":140,"start2":140,"length1":16,"length2":23}]],"length":7228,"saved":false}
{"ts":1353093306602,"patch":[[{"diffs":[[0,"include "],[-1,"<"],[1,"\""],[0,"address_"]],"start1":5,"start2":5,"length1":17,"length2":17}]],"length":7228,"saved":false}
{"ts":1353093307933,"patch":[[{"diffs":[[0,"ok.h"],[-1,">"],[1,"\""],[0,"\r\n\r\n"]],"start1":24,"start2":24,"length1":9,"length2":9}]],"length":7228,"saved":false}
{"ts":1353093604662,"patch":[[{"diffs":[[0,"_LENGTH]"],[1,";"],[0,"\r\n\r\n// T"]],"start1":74,"start2":74,"length1":16,"length2":17}]],"length":7229,"saved":false}
{"ts":1353093630859,"patch":[[{"diffs":[[0,"sEntries"],[1,"()"],[0,");\r\n}\r\n\r"]],"start1":2261,"start2":2261,"length1":16,"length2":18}]],"length":7231,"saved":false}
{"ts":1353093647611,"patch":[[{"diffs":[[0,"Book(uin"],[1,"t"],[0,"16 netwo"]],"start1":2708,"start2":2708,"length1":16,"length2":17}]],"length":7232,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353095268598,"patch":[[{"diffs":[[0,"i].macHi"],[-1,"gh"],[0,";\r\n     "]],"start1":3854,"start2":3854,"length1":18,"length2":16}]],"length":7230,"saved":false}
{"ts":1353095313049,"patch":[[{"diffs":[[0,", uint8 numInter"],[1,"e"],[0,"sts, uint8 *inte"]],"start1":402,"start2":402,"length1":32,"length2":33}]],"length":7231,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353098133150,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"*/"]],"start1":7225,"start2":7225,"length1":6,"length2":4}]],"length":7229,"saved":false}
{"ts":1353098136401,"patch":[[{"diffs":[[0,"\n}\r\n"],[-1,"/*"],[0,"\r\n//"]],"start1":3973,"start2":3973,"length1":10,"length2":8}]],"length":7227,"saved":false}
{"ts":1353098151631,"patch":[[{"diffs":[[0,"int8 *interests)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// Returns a"]],"start1":4802,"start2":4802,"length1":33,"length2":41}]],"length":7235,"saved":false}
{"ts":1353098152849,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[-1,"    "],[1,"}"],[0,"\r\n\r\n// R"]],"start1":4815,"start2":4815,"length1":20,"length2":17}]],"length":7232,"saved":false}
{"ts":1353098153653,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[1,"    \r\n"],[0,"}\r\n\r\n// "]],"start1":4815,"start2":4815,"length1":16,"length2":22}]],"length":7238,"saved":false}
{"ts":1353098156584,"patch":[[{"diffs":[[0," locale)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// R"]],"start1":4953,"start2":4953,"length1":17,"length2":25}]],"length":7246,"saved":false}
{"ts":1353098157777,"patch":[[{"diffs":[[0,"{\r\n    \r"],[1,"\n}\r"],[0,"\n\r\n// Re"]],"start1":4963,"start2":4963,"length1":16,"length2":19}]],"length":7249,"saved":false}
{"ts":1353098163091,"patch":[[{"diffs":[[0,"t8 *locales)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// Retur"]],"start1":5115,"start2":5115,"length1":25,"length2":36},{"diffs":[[0,"ability)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// R"]],"start1":5234,"start2":5234,"length1":17,"length2":18}]],"length":7261,"saved":false}
{"ts":1353098164695,"patch":[[{"diffs":[[0,"ility)\r\n"],[1,"{\r\n    \r\n}"],[0,"\r\n\r\n// R"]],"start1":5236,"start2":5236,"length1":16,"length2":26}]],"length":7271,"saved":false}
{"ts":1353098167197,"patch":[[{"diffs":[[0,"bilites)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// R"]],"start1":5382,"start2":5382,"length1":17,"length2":25}]],"length":7279,"saved":false}
{"ts":1353098168770,"patch":[[{"diffs":[[0,"{\r\n    \r"],[1,"\n}\r"],[0,"\n\r\n// Re"]],"start1":5392,"start2":5392,"length1":16,"length2":19}]],"length":7282,"saved":false}
{"ts":1353098174059,"patch":[[{"diffs":[[0," *interests)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// Retur"]],"start1":5575,"start2":5575,"length1":25,"length2":36},{"diffs":[[0,"8 *capabilities)"],[-1,";"],[0,"\r\n    \r\n// Popul"]],"start1":5780,"start2":5780,"length1":33,"length2":32}]],"length":7292,"saved":false}
{"ts":1353098175379,"patch":[[{"diffs":[[0,"abilities)\r\n"],[1,"{\r\n"],[0,"    \r\n// Pop"]],"start1":5786,"start2":5786,"length1":24,"length2":27}]],"length":7295,"saved":false}
{"ts":1353098176783,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"}\r\n    \r\n"],[0,"// Popul"]],"start1":5799,"start2":5799,"length1":16,"length2":25}]],"length":7304,"saved":false}
{"ts":1353098179862,"patch":[[{"diffs":[[0," locale)"],[-1,";"],[1,"\r\n"],[0,"\r\nvoid n"]],"start1":6023,"start2":6023,"length1":17,"length2":18}]],"length":7305,"saved":false}
{"ts":1353098180308,"patch":[[{"diffs":[[0,"ocale)\r\n"],[1,"{\r\n    "],[0,"\r\nvoid n"]],"start1":6025,"start2":6025,"length1":16,"length2":23}]],"length":7312,"saved":false}
{"ts":1353098181641,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"}\r\n"],[0,"void nod"]],"start1":6034,"start2":6034,"length1":16,"length2":19}]],"length":7315,"saved":false}
{"ts":1353098182801,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[1,"\r\n"],[0,"void nod"]],"start1":6037,"start2":6037,"length1":16,"length2":18}]],"length":7317,"saved":false}
{"ts":1353098185810,"patch":[[{"diffs":[[0,"locales)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// P"]],"start1":6118,"start2":6118,"length1":17,"length2":28}]],"length":7328,"saved":false}
{"ts":1353098189290,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"ret"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5580,"start2":5580,"length1":32,"length2":35}]],"length":7331,"saved":false}
{"ts":1353098191716,"patch":[[{"diffs":[[0,"\n    ret"],[1,"urn 0;"],[0,"\r\n}\r\n\r\n/"]],"start1":5591,"start2":5591,"length1":16,"length2":22}]],"length":7337,"saved":false}
{"ts":1353098197497,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n    \r\n/"]],"start1":5802,"start2":5802,"length1":24,"length2":33}]],"length":7346,"saved":false}
{"ts":1353098203474,"patch":[[{"diffs":[[0,"nterest)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\nvoid n"]],"start1":6378,"start2":6378,"length1":17,"length2":25}]],"length":7354,"saved":false}
{"ts":1353098205687,"patch":[[{"diffs":[[0,"st)\r\n{\r\n"],[-1,"    "],[1,"}\r\n"],[0,"\r\nvoid n"]],"start1":6383,"start2":6383,"length1":20,"length2":19}]],"length":7353,"saved":false}
{"ts":1353098207045,"patch":[[{"diffs":[[0,"st)\r\n{\r\n"],[1,"    \r\n"],[0,"}\r\n\r\nvoi"]],"start1":6383,"start2":6383,"length1":16,"length2":22}]],"length":7359,"saved":false}
{"ts":1353098211858,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// P"]],"start1":6487,"start2":6487,"length1":17,"length2":18}]],"length":7360,"saved":false}
{"ts":1353098212490,"patch":[[{"diffs":[[0,"rests)\r\n"],[1,"}\r\n"],[0,"\r\n\r\n// P"]],"start1":6489,"start2":6489,"length1":16,"length2":19}]],"length":7363,"saved":false}
{"ts":1353098215174,"patch":[[{"diffs":[[0,"rests)\r\n"],[-1,"}"],[1,"{\r\n    "],[0,"\r\n"],[1,"}"],[0,"\r\n\r\n// P"]],"start1":6489,"start2":6489,"length1":19,"length2":26}]],"length":7370,"saved":false}
{"ts":1353098219584,"patch":[[{"diffs":[[0,"ability)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\nvoid n"]],"start1":6752,"start2":6752,"length1":17,"length2":28}]],"length":7381,"saved":false}
{"ts":1353098221219,"patch":[[{"diffs":[[0,"ilities)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// P"]],"start1":6868,"start2":6868,"length1":17,"length2":18}]],"length":7382,"saved":false}
{"ts":1353098223297,"patch":[[{"diffs":[[0,"ities)\r\n"],[1,"{\r\n    \r\n}"],[0,"\r\n\r\n// P"]],"start1":6870,"start2":6870,"length1":16,"length2":26}]],"length":7392,"saved":false}
{"ts":1353098224551,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[1,"\r\n"],[0,"void nod"]],"start1":6766,"start2":6766,"length1":16,"length2":18}]],"length":7394,"saved":false}
{"ts":1353098228220,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n{"],[0,"\r\nvoid n"]],"start1":7230,"start2":7230,"length1":17,"length2":19}]],"length":7396,"saved":false}
{"ts":1353098229237,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[1,"    \r\n    \r\n"],[0,"void nod"]],"start1":7235,"start2":7235,"length1":16,"length2":28}]],"length":7408,"saved":false}
{"ts":1353098230595,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    "],[1,"}\r\n"],[0,"\r\nvoid n"]],"start1":7241,"start2":7241,"length1":20,"length2":19}]],"length":7407,"saved":false}
{"ts":1353098233380,"patch":[[{"diffs":[[0,"apabilities)"],[-1,";"],[1,"\r\n"],[0,"\r\n    \r\n"]],"start1":7386,"start2":7386,"length1":21,"length2":22}]],"length":7408,"saved":false}
{"ts":1353098233951,"patch":[[{"diffs":[[0,"ities)\r\n"],[1,"{\r\n    "],[0,"\r\n    \r\n"]],"start1":7392,"start2":7392,"length1":16,"length2":23}]],"length":7415,"saved":false}
{"ts":1353098235287,"patch":[[{"diffs":[[0,")\r\n{\r\n    \r\n"],[1,"}\r\n"],[0,"    \r\n"]],"start1":7397,"start2":7397,"length1":18,"length2":21}]],"length":7418,"saved":false}
{"ts":1353098309343,"patch":[[{"diffs":[[0,"ilites)\r\n{\r\n    "],[1,"return 9"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5383,"start2":5383,"length1":32,"length2":40}]],"length":7426,"saved":false}
{"ts":1353098309833,"patch":[[{"diffs":[[0,"urn "],[-1,"9"],[1,"0"],[0,"\r\n}\r"]],"start1":5402,"start2":5402,"length1":9,"length2":9}]],"length":7426,"saved":false}
{"ts":1353098310757,"patch":[[{"diffs":[[0,"return 0"],[1,";"],[0,"\r\n}\r\n\r\n/"]],"start1":5399,"start2":5399,"length1":16,"length2":17}]],"length":7427,"saved":false}
{"ts":1353098313744,"patch":[[{"diffs":[[0,"bility)\r\n{\r\n    "],[1,"return 0"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5235,"start2":5235,"length1":32,"length2":40}]],"length":7435,"saved":false}
{"ts":1353098315202,"patch":[[{"diffs":[[0,"return 0"],[1,";"],[0,"\r\n}\r\n\r\n/"]],"start1":5251,"start2":5251,"length1":16,"length2":17}]],"length":7436,"saved":false}
{"ts":1353098317777,"patch":[[{"diffs":[[0,"ocales)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5120,"start2":5120,"length1":32,"length2":41}]],"length":7445,"saved":false}
{"ts":1353098321593,"patch":[[{"diffs":[[0,"locale)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":4954,"start2":4954,"length1":32,"length2":41}]],"length":7454,"saved":false}
{"ts":1353098324303,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":4811,"start2":4811,"length1":32,"length2":41}]],"length":7463,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353099517795,"patch":[[{"diffs":[[0,"k.h\"\r\n\r\n"],[1,"static "],[0,"address_"]],"start1":25,"start2":25,"length1":16,"length2":23},{"diffs":[[0,"{\r\n    \r\n}\r\n"],[-1,"    "],[1,"\r\nvoid nodesInAddressBook(uint16 *networkAddresses)\r\n{\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        networkAddress[i] = addressBook[i].networkAddress;\r\n        \r\n    }\r\n    \r\n}"],[0,"\r\n"]],"start1":7452,"start2":7452,"length1":18,"length2":211}]],"length":7663,"saved":false}
{"ts":1353099831691,"patch":[[{"diffs":[[0,"\r\n{\r\n    \r\n}\r\n\r\n"],[1,"// Returns a list of all nodes in the network\r\n"],[0,"void nodesInAddr"]],"start1":7450,"start2":7450,"length1":32,"length2":79},{"diffs":[[0,"resses)\r\n{\r\n"],[1,"    uint8 i = 0;\r\n    \r\n"],[0,"    for (i ="]],"start1":7555,"start2":7555,"length1":24,"length2":48},{"diffs":[[0,"H; i++)\r\n    {\r\n"],[1,"        if (addressBook[i].locale != 0)\r\n        {\r\n    "],[0,"        networkA"]],"start1":7632,"start2":7632,"length1":32,"length2":88},{"diffs":[[0,"    "],[-1,"\r\n    }\r\n    \r\n}"],[1,"    \r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\n// Returns the number of interests a node has\r\nuint8 numNodeInterests(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].numInterests;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Writes a list of interests a node has to the passed in pointer\r\nvoid nodeInterests(uint8 *interests, uint16 networkAddress)\r\n{\r\n    \r\n}\r\n"],[0,"\r\n"]],"start1":7768,"start2":7768,"length1":22,"length2":631}]],"length":8399,"saved":false}
{"ts":1353099957059,"patch":[[{"diffs":[[0,"ddress)\r\n{\r\n"],[1,"    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            for (j = 0; j < addressBook[i].numInterests; j++)\r\n            {\r\n                interests[j] = addressBook[i].interests[j];\r\n                \r\n            }\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\n"]],"start1":8376,"start2":8376,"length1":23,"length2":432}]],"length":8808,"saved":false}
{"ts":1353101342445,"patch":[[{"diffs":[[0,"kAddress"],[1,"es"],[0,"[i] = ad"]],"start1":7718,"start2":7718,"length1":16,"length2":18}]],"length":8810,"saved":false}
{"ts":1353107461858,"patch":[[{"diffs":[[0,"mAddress"],[-1,"Book"],[0,"Entries("]],"start1":2189,"start2":2189,"length1":20,"length2":16}]],"length":8806,"saved":false}
{"ts":1353108232608,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY\r\n    \r\n    \r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":4818,"start2":4818,"length1":33,"length2":133}]],"length":8906,"saved":false}
{"ts":1353108526729,"patch":[[{"diffs":[[0,";\r\n    uint8 i ="],[1," 0, j = 0, k ="],[0," 0;\r\n    \r\n    f"]],"start1":4846,"start2":4846,"length1":32,"length2":46},{"diffs":[[0,"; i < MY"],[1,"_ADDRESS_BOOK_LENGTH; i++)"],[0,"\r\n    "],[1,"{"],[0,"\r\n    "],[1,"    for (j = 0; j < numInterests; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numInterests; k++)\r\n            {\r\n                if (addressBook[i].interests[k] == interests[j])\r\n                {\r\n                    // If a match is found, increment count and break k-for-loop\r\n                    result += 1;\r\n                    \r\n                    break;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n    \r\n"]],"start1":4901,"start2":4901,"length1":28,"length2":549},{"diffs":[[0,"es)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numCapabilities; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numcapabilities; k++)\r\n            {\r\n                if (addressBook[i].capabilities[k] == capabilities[j])\r\n                {\r\n                    // If a match is found, increment count and break k-for-loop\r\n                    result += 1;\r\n                    \r\n                    break;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":6061,"start2":6061,"length1":33,"length2":680}]],"length":10088,"saved":false}
{"ts":1353108895893,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n"],[0,"    "]],"start1":4486,"start2":4486,"length1":118,"length2":8},{"diffs":[[0,"le)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":5495,"start2":5495,"length1":33,"length2":286}]],"length":10231,"saved":false}
{"ts":1353108958371,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numLocales; j++)\r\n        {\r\n            if (addressBook[i].locale == locales[j])\r\n            {\r\n                result += 1;\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":5923,"start2":5923,"length1":33,"length2":430}]],"length":10628,"saved":false}
{"ts":1353109040593,"patch":[[{"diffs":[[0,"ty)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numCapabilities; j++)\r\n        {\r\n            if (addressBook[i].capabilities[j] == capability)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":6444,"start2":6444,"length1":33,"length2":441}]],"length":11036,"saved":false}
{"ts":1353109613487,"patch":[[{"diffs":[[0,"locale)\r\n{\r\n"],[1,"    uint8 i = 0, j = 0;\r\n    uint8 nodesFound = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            networkAddress[nodesFound] = addressBook[i].locale;\r\n            \r\n            nodesFound += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":8320,"start2":8320,"length1":24,"length2":347}]],"length":11359,"saved":false}
{"ts":1353109673120,"patch":[[{"diffs":[[0,"ocales)\r\n{\r\n    "],[1,"uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numLocales; j++)\r\n        {\r\n            if (addressBook[i].locale == locales[j])\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n}\r\n\r\n// Popula"]],"start1":8738,"start2":8738,"length1":32,"length2":469}]],"length":11796,"saved":false}
{"ts":1353109681508,"patch":[[{"diffs":[[0,"Book[i]."],[-1,"locale"],[1,"networkAddress"],[0,";\r\n     "]],"start1":8552,"start2":8552,"length1":22,"length2":30}]],"length":11804,"saved":false}
{"ts":1353109782907,"patch":[[{"diffs":[[0,"terest)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":9425,"start2":9425,"length1":24,"length2":488}]],"length":12268,"saved":false}
{"ts":1353109813578,"patch":[[{"diffs":[[0,"kAddress"],[1,"es"],[0,"[nodesFo"]],"start1":8522,"start2":8522,"length1":16,"length2":18}]],"length":12270,"saved":false}
{"ts":1353109884003,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numInterests; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numInterests; k++)\r\n            {\r\n                if (addressBook[i].interests[k] == interests[j])\r\n                {\r\n                    networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                    \r\n                    nodesFound += 1;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;"],[0,"\r\n}\r\n\r\n// Popula"]],"start1":10000,"start2":10000,"length1":32,"length2":651}]],"length":12889,"saved":false}
{"ts":1353109991418,"patch":[[{"diffs":[[0,"bility)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numCapabilities; j++)\r\n        {\r\n            if (addressBook[i].capabilities[j] == capability)\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":10884,"start2":10884,"length1":24,"length2":496}]],"length":13361,"saved":false}
{"ts":1353110053116,"patch":[[{"diffs":[[0,"pabilities)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numCapabilities; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numcapabilities; k++)\r\n            {\r\n                if (addressBook[i].capabilities[k] == capabilities[j])\r\n                {\r\n                    networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                    \r\n                    nodesFound += 1;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\n// Po"]],"start1":11470,"start2":11470,"length1":32,"length2":643}]],"length":13972,"saved":false}
{"ts":1353110121756,"patch":[[{"diffs":[[0,"numInter"],[1,"e"],[0,"sts, uin"]],"start1":4681,"start2":4681,"length1":16,"length2":17}]],"length":13973,"saved":false}
{"ts":1353110138106,"patch":[[{"diffs":[[0,"dressBook[i].num"],[-1,"c"],[1,"C"],[0,"apabilities; k++"]],"start1":7224,"start2":7224,"length1":33,"length2":33}]],"length":13973,"saved":false}
{"ts":1353110159230,"patch":[[{"diffs":[[0,"apabilit"],[1,"i"],[0,"es)\r\n{\r\n"]],"start1":7002,"start2":7002,"length1":16,"length2":17}]],"length":13974,"saved":false}
{"ts":1353110173251,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    return result;\r\n    \r\n"],[0,"}\r\n\r"]],"start1":7651,"start2":7651,"length1":34,"length2":8}]],"length":13948,"saved":false}
{"ts":1353110197375,"patch":[[{"diffs":[[0,"k[i].num"],[-1,"c"],[1,"V"],[0,"apabilit"]],"start1":11680,"start2":11680,"length1":17,"length2":17}]],"length":13948,"saved":false}
{"ts":1353110218192,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    return result;\r\n"],[0,"}\r\n\r\n// "]],"start1":10585,"start2":10585,"length1":36,"length2":16}]],"length":13928,"saved":false}
{"ts":1353110230326,"patch":[[{"diffs":[[0,".num"],[-1,"V"],[1,"C"],[0,"apab"]],"start1":11664,"start2":11664,"length1":9,"length2":9}]],"length":13928,"saved":false}
{"ts":1353110269769,"patch":[[{"diffs":[[0,";\r\n    uint8 i ="],[-1," 0, j ="],[0," 0;\r\n    \r\n    f"]],"start1":5524,"start2":5524,"length1":39,"length2":32},{"diffs":[[0,"{\r\n    uint8 i ="],[-1," 0, j ="],[0," 0;\r\n    uint8 n"]],"start1":8298,"start2":8298,"length1":39,"length2":32}]],"length":13914,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353832986045,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[1,".. TO"],[0,"\r\n}\r\n\r\n// Re"]],"start1":12551,"start2":12551,"length1":24,"length2":29}]],"length":13919,"saved":false}
{"ts":1353832992654,"patch":[[{"diffs":[[0,"    "],[-1,".."],[1,"//"],[0," TO"],[1,"DO: Write thj"],[0,"\r\n}\r"]],"start1":12559,"start2":12559,"length1":13,"length2":26}]],"length":13932,"saved":false}
{"ts":1353832993670,"patch":[[{"diffs":[[0,"Write th"],[-1,"j"],[1,"is"],[0,"\r\n}\r\n\r\n/"]],"start1":12572,"start2":12572,"length1":17,"length2":18}]],"length":13933,"saved":false}
{"ts":1353832998948,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// Write tjos"],[0,"\r\n}\r\n\r\nvoid "]],"start1":12391,"start2":12391,"length1":24,"length2":37}]],"length":13946,"saved":false}
{"ts":1353833001886,"patch":[[{"diffs":[[0,"\n    // "],[1,"TODO"],[0,"Write tj"]],"start1":12398,"start2":12398,"length1":16,"length2":20}]],"length":13950,"saved":false}
{"ts":1353833004639,"patch":[[{"diffs":[[0," // TODO"],[1,": "],[0,"Write tj"]],"start1":12402,"start2":12402,"length1":16,"length2":18}]],"length":13952,"saved":false}
{"ts":1353833005202,"patch":[[{"diffs":[[0,"rite tjo"],[-1,"s"],[0,"\r\n}\r\n\r\nv"]],"start1":12413,"start2":12413,"length1":17,"length2":16}]],"length":13951,"saved":false}
{"ts":1353833006423,"patch":[[{"diffs":[[0," Write t"],[-1,"j"],[0,"o\r\n}\r\n\r\n"]],"start1":12411,"start2":12411,"length1":17,"length2":16}]],"length":13950,"saved":false}
{"ts":1353833007691,"patch":[[{"diffs":[[0,"Write to"],[1,"do"],[0,"\r\n}\r\n\r\nv"]],"start1":12412,"start2":12412,"length1":16,"length2":18}]],"length":13952,"saved":false}
{"ts":1353833009268,"patch":[[{"diffs":[[0,"te t"],[-1,"odo"],[1,"jos"],[0,"\r\n}\r"]],"start1":12415,"start2":12415,"length1":11,"length2":11}]],"length":13952,"saved":false}
{"ts":1353833011156,"patch":[[{"diffs":[[0,"te t"],[-1,"jo"],[1,"hi"],[0,"s\r\n}"]],"start1":12415,"start2":12415,"length1":10,"length2":10}]],"length":13952,"saved":false}
{"ts":1353833832958,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Interest"],[1,"Capabilitie"],[0,"s(uint8 numL"]],"start1":7735,"start2":7735,"length1":32,"length2":35},{"diffs":[[0,"lities(uint8 num"],[-1,"Local"],[1,"Capabiliti"],[0,"es, uint8 *local"]],"start1":7753,"start2":7753,"length1":37,"length2":42},{"diffs":[[0,"nt8 "],[-1,"numInterests, uint8 *interest"],[1,"*capabilitie"],[0,"s)\r\n"]],"start1":7807,"start2":7807,"length1":37,"length2":20}]],"length":13943,"saved":false}
{"ts":1353833835393,"patch":[[{"diffs":[[0,"lities(uint8 num"],[-1,"Local"],[1,"Capabiliti"],[0,"es, uint8 *local"]],"start1":7953,"start2":7953,"length1":37,"length2":42},{"diffs":[[0,"s, \r\n   "],[-1," uint8 numCapabilities,"],[0," uint8 *"]],"start1":7996,"start2":7996,"length1":39,"length2":16}]],"length":13925,"saved":false}
{"ts":1353833840043,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Capabilitie"],[1,"Interest"],[0,"s(uint8 numC"]],"start1":7735,"start2":7735,"length1":35,"length2":32}]],"length":13922,"saved":false}
{"ts":1353833849282,"patch":[[{"diffs":[[0,"ts(uint8 num"],[-1,"Capabilitie"],[1,"Interest"],[0,"s, uint8 *lo"]],"start1":7754,"start2":7754,"length1":35,"length2":32}]],"length":13919,"saved":false}
{"ts":1353833852848,"patch":[[{"diffs":[[0,"\n    uint8 *"],[-1,"capabilitie"],[1,"Interest"],[0,"s)\r\n{\r\n    r"]],"start1":7794,"start2":7794,"length1":35,"length2":32}]],"length":13916,"saved":false}
{"ts":1353833854252,"patch":[[{"diffs":[[0," uint8 *"],[-1,"I"],[1,"i"],[0,"nterests"]],"start1":7798,"start2":7798,"length1":17,"length2":17}]],"length":13916,"saved":false}
{"ts":1353833857338,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[-1,"return 0;"],[1,"// T"],[0,"\r\n}\r\n\r\n// Re"]],"start1":7813,"start2":7813,"length1":33,"length2":28}]],"length":13911,"saved":false}
{"ts":1353833859198,"patch":[[{"diffs":[[0,"    // T"],[1,"ODO: Write "],[0,"\r\n}\r\n\r\n/"]],"start1":7821,"start2":7821,"length1":16,"length2":27}]],"length":13922,"saved":false}
{"ts":1353833860609,"patch":[[{"diffs":[[0,": Write "],[1,"this"],[0,"\r\n}\r\n\r\n/"]],"start1":7832,"start2":7832,"length1":16,"length2":20}]],"length":13926,"saved":false}
{"ts":1353833861927,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[0,"\r\n}\r\n\r\n/"]],"start1":7817,"start2":7817,"length1":35,"length2":16}]],"length":13907,"saved":false}
{"ts":1353833863611,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// TODO: Write this"],[0,"\r\n}\r\n\r\n// Re"]],"start1":7813,"start2":7813,"length1":24,"length2":43}]],"length":13926,"saved":false}
{"ts":1353833865818,"patch":[[{"diffs":[[0,"    "],[-1,"return 0;"],[1,"// TODO: Write this"],[0,"\r\n}\r"]],"start1":8031,"start2":8031,"length1":17,"length2":27}]],"length":13936,"saved":false}
{"ts":1353833897164,"patch":[[{"diffs":[[0,"sts(uint"],[-1,"16 *networkAddresse"],[1,"8 numInterest"],[0,"s, uint8"]],"start1":12272,"start2":12272,"length1":35,"length2":29},{"diffs":[[0,"nt8 "],[-1,"numL"],[1,"*l"],[0,"ocales,"],[1," "],[0,"\r\n   "],[-1," uint8 *locales, uint8 numInterests,"],[0," uin"]],"start1":12298,"start2":12298,"length1":60,"length2":23}]],"length":13893,"saved":false}
{"ts":1353833911190,"patch":[[{"diffs":[[0,"uint"],[-1,"16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities,"],[1,"8 numCapabilities, uint8 *locales, \r\n   "],[0," uin"]],"start1":12406,"start2":12406,"length1":91,"length2":48}]],"length":13850,"saved":false}
{"ts":1353834241674,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Capabilities("],[1,"Interests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *locales, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, \r\n    "],[0,"uint8 numCap"]],"start1":12381,"start2":12381,"length1":37,"length2":190},{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *capabilit"]],"start1":12582,"start2":12582,"length1":38,"length2":32},{"diffs":[[0,"8 *capabilities)"],[1,";"],[0,"\r\n{\r\n    // TODO"]],"start1":12602,"start2":12602,"length1":32,"length2":33}]],"length":13998,"saved":false}
{"ts":1353834243820,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"void nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *locales, uint8 *interests);\r\n"],[0,"void"]],"start1":12366,"start2":12366,"length1":129,"length2":8}]],"length":13877,"saved":false}
{"ts":1353834245937,"patch":[[{"diffs":[[0,"esWithInterests("],[1,"uint16 *networkAddresses, "],[0,"uint8 numInteres"]],"start1":12260,"start2":12260,"length1":32,"length2":58},{"diffs":[[0,"8 numInterests, "],[1,"\r\n    "],[0,"uint8 *locales, "]],"start1":12306,"start2":12306,"length1":32,"length2":38},{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *interests"]],"start1":12328,"start2":12328,"length1":38,"length2":32},{"diffs":[[0,"int8 *interests)"],[1,";"],[0,"\r\n{\r\n    // TODO"]],"start1":12345,"start2":12345,"length1":32,"length2":33}]],"length":13904,"saved":false}
{"ts":1353834248709,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[0,"\r\n{\r\n   "]],"start1":12353,"start2":12353,"length1":17,"length2":16},{"diffs":[[0,"ilities)"],[-1,";"],[0,"\r\n{\r\n   "]],"start1":12515,"start2":12515,"length1":17,"length2":16}]],"length":13902,"saved":false}
{"ts":1353835543807,"patch":[[{"diffs":[[0,"been allocated.\r"],[1,"\n\r\nvoid nodesInLocaleWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 locale, uint8 *interests);\r"],[0,"\nvoid nodesInLoc"]],"start1":12226,"start2":12226,"length1":32,"length2":152}]],"length":14022,"saved":false}
{"ts":1353835547858,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n    {"],[0,"\r\nvoid n"]],"start1":12352,"start2":12352,"length1":17,"length2":23}]],"length":14028,"saved":false}
{"ts":1353835549042,"patch":[[{"diffs":[[0,"\n    {\r\n"],[1,"        \r\n    }\r\n"],[0,"void nod"]],"start1":12361,"start2":12361,"length1":16,"length2":33}]],"length":14045,"saved":false}
{"ts":1353835551151,"patch":[[{"diffs":[[0,"s)\r\n"],[-1,"    "],[0,"{\r\n    "],[-1,"  "],[-1,"  \r\n    "],[1,"\r\n"],[0,"}\r\nv"]],"start1":12358,"start2":12358,"length1":29,"length2":17}]],"length":14033,"saved":false}
{"ts":1353835556207,"patch":[[{"diffs":[[0,"cated.\r\n"],[-1,"\r\n"],[0,"void nod"]],"start1":12235,"start2":12235,"length1":18,"length2":16}]],"length":14031,"saved":false}
{"ts":1353835563072,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// TODO: Write this."],[0,"\r\n}\r\nvoid no"]],"start1":12355,"start2":12355,"length1":24,"length2":44}]],"length":14051,"saved":false}
{"ts":1353835569183,"patch":[[{"diffs":[[0,"te this."],[1,"  Should be pretty simliar to"],[0,"\r\n}\r\nvoi"]],"start1":12379,"start2":12379,"length1":16,"length2":45}]],"length":14080,"saved":false}
{"ts":1353835571734,"patch":[[{"diffs":[[0," sim"],[-1,"l"],[0,"i"],[1,"l"],[0,"ar to"],[1," "],[0,"\r\n}\r"]],"start1":12405,"start2":12405,"length1":15,"length2":16}]],"length":14081,"saved":false}
{"ts":1353835577381,"patch":[[{"diffs":[[0,"ilar to "],[1,"the following function."],[0,"\r\n}\r\nvoi"]],"start1":12409,"start2":12409,"length1":16,"length2":39}]],"length":14104,"saved":false}
{"ts":1353835634853,"patch":[[{"diffs":[[0,"erests\r\n"],[1,"uint8 numNodesInLocaleWithInterests(uint8 numInterests, uint8 locale, \r\n    uint8 *interests);\r\n"],[0,"uint8 nu"]],"start1":7712,"start2":7712,"length1":16,"length2":112}]],"length":14200,"saved":false}
{"ts":1353835638459,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n{\r\n    \r\n}\r\n}"],[0,"\r\nuint8 "]],"start1":7805,"start2":7805,"length1":17,"length2":31}]],"length":14214,"saved":false}
{"ts":1353835639935,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[-1,"}"],[0,"\r\nuint8 "]],"start1":7819,"start2":7819,"length1":17,"length2":16}]],"length":14213,"saved":false}
{"ts":1353836376726,"patch":[[{"diffs":[[0,"lt;\r\n    \r\n}\r\n\r\n"],[1,"\r\n// Gets a pointer to a struct for the given address\r\naddress_entry *getAddressEntryPointer(uint16 networkAddress);\r\n\r\n\r\n"],[0,"// Returns a cou"]],"start1":3966,"start2":3966,"length1":32,"length2":154}]],"length":14335,"saved":false}
{"ts":1353836379562,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[-1,"\r\n"],[0,"// Gets "]],"start1":3974,"start2":3974,"length1":18,"length2":16}]],"length":14333,"saved":false}
{"ts":1353836382378,"patch":[[{"diffs":[[0,"Address)"],[-1,";"],[1,"\r\n{\r\n    \r\n    \r\n}"],[0,"\r\n\r\n\r\n//"]],"start1":4087,"start2":4087,"length1":17,"length2":34}]],"length":14350,"saved":false}
{"ts":1353836384400,"patch":[[{"diffs":[[0,"   \r\n    \r\n}\r\n\r\n"],[-1,"\r\n"],[0,"// Returns a cou"]],"start1":4101,"start2":4101,"length1":34,"length2":32}]],"length":14348,"saved":false}
{"ts":1353836389577,"patch":[[{"diffs":[[0,"ss)\r\n{\r\n    "],[1,"uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHi;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;"],[0,"\r\n    \r\n}\r\n\r"]],"start1":4092,"start2":4092,"length1":24,"length2":342}]],"length":14666,"saved":false}
{"ts":1353836403357,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"uint32 result = 0;"],[1,"address_entry"],[0,"\r\n    ui"]],"start1":4096,"start2":4096,"length1":34,"length2":29}]],"length":14661,"saved":false}
{"ts":1353836405268,"patch":[[{"diffs":[[0,"ddress_entry"],[1," *resu"],[0,"\r\n    uint8 "]],"start1":4105,"start2":4105,"length1":24,"length2":30}]],"length":14667,"saved":false}
{"ts":1353836406524,"patch":[[{"diffs":[[0,"ry *resu"],[1,"lt;"],[0,"\r\n    ui"]],"start1":4115,"start2":4115,"length1":16,"length2":19}]],"length":14670,"saved":false}
{"ts":1353836412352,"patch":[[{"diffs":[[0,"lt = addressBook"],[-1,"[i]"],[0,".macHi;\r\n       "]],"start1":4298,"start2":4298,"length1":35,"length2":32}]],"length":14667,"saved":false}
{"ts":1353836414454,"patch":[[{"diffs":[[0,"ressBook"],[-1,".macHi"],[0,";\r\n     "]],"start1":4306,"start2":4306,"length1":22,"length2":16}]],"length":14661,"saved":false}
{"ts":1353836530369,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"static "],[0,"addr"]],"start1":29,"start2":29,"length1":15,"length2":8}]],"length":14654,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353839640778,"patch":[[{"diffs":[[1,"dispatching th"],[0,"\r\n\r\n#include"]],"start1":0,"start2":0,"length1":12,"length2":26}]],"length":14668,"saved":false}
{"ts":1353839644906,"patch":[[{"diffs":[[0,"ching th"],[1,"e war rocket ajax to "],[0,"\r\n\r\n#inc"]],"start1":6,"start2":6,"length1":16,"length2":37}]],"length":14689,"saved":false}
{"ts":1353839649192,"patch":[[{"diffs":[[0,"ajax to "],[1,"return his body."],[0,"\r\n\r\n#inc"]],"start1":27,"start2":27,"length1":16,"length2":32}]],"length":14705,"saved":false}
{"ts":1353839651844,"patch":[[{"diffs":[[-1,"dispatching the war rocket ajax to return his body."],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":55,"length2":4}]],"length":14654,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353890374083,"patch":[[{"diffs":[[0," \r\n    }\r\n    \r\n"],[1,"    return result;\r\n    \r\n"],[0,"}\r\n\r\n// Returns "]],"start1":8073,"start2":8073,"length1":32,"length2":58}]],"length":14680,"saved":false}
