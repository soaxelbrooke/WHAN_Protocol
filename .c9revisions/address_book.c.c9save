{"ts":1352707164306,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":7157}]],"length":7157}
{"contributors":[],"silentsave":false,"ts":1352707164247,"patch":[[{"diffs":[[1,"\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n\r\n\r\n// Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":7157}]],"length":7157,"saved":false}
{"contributors":[],"silentsave":true,"ts":1352771206068,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n"],[0,"// "],[-1,"Add a device to the address book (returns non-zero if address book is full)\r\n// Only interests that match this nodes capabilities are stored\r\nuint8 addNodeToAddressBook(uint16 networkAddress, uint32 macHi, uint32 macLow, \r\n    uint8 locale, uint8 numIntersts, uint8 *interests, uint8 numCapabilities,\r\n    uint8 *capabilities)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    // Check if address book is full\r\n    if (numFreeAddressEntries() != 0)\r\n    {\r\n        // If address book isn't full, find first free entry\r\n        for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n        {\r\n            if (addressBook[i].locale == 0) // If locale is zero, entry is free\r\n            {\r\n                addressBook[i].networkAddress = networkAddress;\r\n                addressBook[i].macHi = macHi;\r\n                addressBook[i].macLow = macLow;\r\n                addressBook[i].locale = locale;\r\n                addressBook[i].numInterests = numInterests;\r\n                memcpy(addressBook[i].interests, interests, numInterests);\r\n                addressBook[i].numCapabilities = numCapabilities;\r\n                memcpy(addressBook[i].capabilities, capabilities, \r\n                    numCapabilities);\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    } else {\r\n        result = 1;\r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Remove a node form the address book, returns non zero if node not found.\r\nuint8 removeNodeFromAddressBook(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 1;\r\n    \r\n    // If address book isn't full, find first free entry\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress) \r\n        {\r\n            addressBook[i].locale = 0;\r\n                \r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns the number of address book entries\r\nuint8 numAddressBookEntries(void)\r\n{\r\n    return (MY_ADDRESS_BOOK_LENGTH - numFreeAddressEntries);\r\n}\r\n\r\n// Returns number of free spaces in address book\r\nuint8 numFreeAddressEntries(void)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == 0)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns nonzero if network address is not in address book\r\nuint8 isInAddressBook(uin16 networkAddress)\r\n{\r\n    uint8 result = 1;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = 0;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the low 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacLow(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macLow;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Gets the hi 32 bits of the MAC associated with the passed in network address\r\nuint32 getMacHigh(uint16 networkAddress)\r\n{\r\n    uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHigh;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n/*\r\n// Returns a count of the number of nodes in the address book with the passed in\r\n// interest\r\nuint8 numNodesWithInterest(uint8 interest)\r\n{\r\n    uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Returns a count of the number of nodes in the address book with any of the \r\n// passed in interest\r\nuint8 numNodesWithInterests(uint8 numIntersts, uint8 *interests);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in\r\n// locale\r\nuint8 numNodesInLocale(uint8 locale);\r\n\r\n// Returns a count of the number of nodes in the address book in the passed in \r\n// locales\r\nuint8 numNodesInLocales(uint8 numLocales, uint8 *locales);\r\n\r\n// Returns a count of nodes with given capabilities\r\nuint8 numNodesWithCapability(uint8 capability);\r\n\r\n// Return a count of nodes with any of given capabilities\r\nuint8 numNodesWithCapabilities(uint8 numCapabilities, uint8 *capabilites);\r\n\r\n// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocalesWithInterests(uint8 numLocales, uint8 *locales, \r\n    uint8 numInterests, uint8 *interests);\r\n\r\n// Returns a count of node sin given locales with given capabilities\r\nuint8 numNodesInLocalesWithCapabilities(uint8 numLocales, uint8 *locales, \r\n    uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n// Populates a passed in array with list of nodes in given locale.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesInLocale(uint16 *networkAddresses, uint8 locale);\r\nvoid nodesInLocales(uint16 *networkAddresses, uint8 numLocales, uint8 *locales);\r\n\r\n// Populates a passed in array with list of nodes with given interests.\r\n// Assumes that nodes have been counted and that proper memory has been \r\n// allocated.\r\nvoid nodesWithInterest(uint16 *networkAddresses, uint8 interest);\r\nvoid nodesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *interests);\r\n\r\n// Populates a passed in network address array with list of nodes with given \r\n// capability.  Assumes that nodes have been counted and that proper memory has \r\n// been allocated.\r\nvoid nodesWithCapability(uint16 *networkAddresses, uint8 capability);\r\nvoid nodesWithCapabilities(uint16 *networkAddresses, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n\r\n// Populates passed in network addres array with list of nodes in given locales\r\n// with given interests or capabilities.  Assumes that nodes have been counted \r\n// and that proper memory has been allocated.\r\nvoid nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numInterests, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities, uint8 *capabilities);\r\n    \r\n*/\r\n\r\n#include <address_book.h>\r\n\r\naddress_entry addressBook[MY_ADDRESS_BOOK_LENGTH]\r\n"],[0,"\r\n\r\n"]],"start1":82,"start2":82,"length1":7163,"length2":11}]],"length":7162,"saved":false}
{"ts":1352771209673,"patch":[[{"diffs":[[0,"]\r\n\r\n// "],[1,"TODO: make"],[0,"\r\n\r\n// A"]],"start1":81,"start2":81,"length1":16,"length2":26}]],"length":7172,"saved":false}
{"ts":1352771217761,"patch":[[{"diffs":[[0,"DO: make"],[1," some mechanism for storing this in non-volatile "],[0,"\r\n\r\n// A"]],"start1":91,"start2":91,"length1":16,"length2":65}]],"length":7221,"saved":false}
{"ts":1352771220113,"patch":[[{"diffs":[[0,"olatile "],[1,"memory!"],[0,"\r\n\r\n// A"]],"start1":140,"start2":140,"length1":16,"length2":23}]],"length":7228,"saved":false}
{"ts":1353093306602,"patch":[[{"diffs":[[0,"include "],[-1,"<"],[1,"\""],[0,"address_"]],"start1":5,"start2":5,"length1":17,"length2":17}]],"length":7228,"saved":false}
{"ts":1353093307933,"patch":[[{"diffs":[[0,"ok.h"],[-1,">"],[1,"\""],[0,"\r\n\r\n"]],"start1":24,"start2":24,"length1":9,"length2":9}]],"length":7228,"saved":false}
{"ts":1353093604662,"patch":[[{"diffs":[[0,"_LENGTH]"],[1,";"],[0,"\r\n\r\n// T"]],"start1":74,"start2":74,"length1":16,"length2":17}]],"length":7229,"saved":false}
{"ts":1353093630859,"patch":[[{"diffs":[[0,"sEntries"],[1,"()"],[0,");\r\n}\r\n\r"]],"start1":2261,"start2":2261,"length1":16,"length2":18}]],"length":7231,"saved":false}
{"ts":1353093647611,"patch":[[{"diffs":[[0,"Book(uin"],[1,"t"],[0,"16 netwo"]],"start1":2708,"start2":2708,"length1":16,"length2":17}]],"length":7232,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353095268598,"patch":[[{"diffs":[[0,"i].macHi"],[-1,"gh"],[0,";\r\n     "]],"start1":3854,"start2":3854,"length1":18,"length2":16}]],"length":7230,"saved":false}
{"ts":1353095313049,"patch":[[{"diffs":[[0,", uint8 numInter"],[1,"e"],[0,"sts, uint8 *inte"]],"start1":402,"start2":402,"length1":32,"length2":33}]],"length":7231,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353098133150,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"*/"]],"start1":7225,"start2":7225,"length1":6,"length2":4}]],"length":7229,"saved":false}
{"ts":1353098136401,"patch":[[{"diffs":[[0,"\n}\r\n"],[-1,"/*"],[0,"\r\n//"]],"start1":3973,"start2":3973,"length1":10,"length2":8}]],"length":7227,"saved":false}
{"ts":1353098151631,"patch":[[{"diffs":[[0,"int8 *interests)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// Returns a"]],"start1":4802,"start2":4802,"length1":33,"length2":41}]],"length":7235,"saved":false}
{"ts":1353098152849,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[-1,"    "],[1,"}"],[0,"\r\n\r\n// R"]],"start1":4815,"start2":4815,"length1":20,"length2":17}]],"length":7232,"saved":false}
{"ts":1353098153653,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[1,"    \r\n"],[0,"}\r\n\r\n// "]],"start1":4815,"start2":4815,"length1":16,"length2":22}]],"length":7238,"saved":false}
{"ts":1353098156584,"patch":[[{"diffs":[[0," locale)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// R"]],"start1":4953,"start2":4953,"length1":17,"length2":25}]],"length":7246,"saved":false}
{"ts":1353098157777,"patch":[[{"diffs":[[0,"{\r\n    \r"],[1,"\n}\r"],[0,"\n\r\n// Re"]],"start1":4963,"start2":4963,"length1":16,"length2":19}]],"length":7249,"saved":false}
{"ts":1353098163091,"patch":[[{"diffs":[[0,"t8 *locales)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// Retur"]],"start1":5115,"start2":5115,"length1":25,"length2":36},{"diffs":[[0,"ability)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// R"]],"start1":5234,"start2":5234,"length1":17,"length2":18}]],"length":7261,"saved":false}
{"ts":1353098164695,"patch":[[{"diffs":[[0,"ility)\r\n"],[1,"{\r\n    \r\n}"],[0,"\r\n\r\n// R"]],"start1":5236,"start2":5236,"length1":16,"length2":26}]],"length":7271,"saved":false}
{"ts":1353098167197,"patch":[[{"diffs":[[0,"bilites)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\n\r\n// R"]],"start1":5382,"start2":5382,"length1":17,"length2":25}]],"length":7279,"saved":false}
{"ts":1353098168770,"patch":[[{"diffs":[[0,"{\r\n    \r"],[1,"\n}\r"],[0,"\n\r\n// Re"]],"start1":5392,"start2":5392,"length1":16,"length2":19}]],"length":7282,"saved":false}
{"ts":1353098174059,"patch":[[{"diffs":[[0," *interests)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// Retur"]],"start1":5575,"start2":5575,"length1":25,"length2":36},{"diffs":[[0,"8 *capabilities)"],[-1,";"],[0,"\r\n    \r\n// Popul"]],"start1":5780,"start2":5780,"length1":33,"length2":32}]],"length":7292,"saved":false}
{"ts":1353098175379,"patch":[[{"diffs":[[0,"abilities)\r\n"],[1,"{\r\n"],[0,"    \r\n// Pop"]],"start1":5786,"start2":5786,"length1":24,"length2":27}]],"length":7295,"saved":false}
{"ts":1353098176783,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"}\r\n    \r\n"],[0,"// Popul"]],"start1":5799,"start2":5799,"length1":16,"length2":25}]],"length":7304,"saved":false}
{"ts":1353098179862,"patch":[[{"diffs":[[0," locale)"],[-1,";"],[1,"\r\n"],[0,"\r\nvoid n"]],"start1":6023,"start2":6023,"length1":17,"length2":18}]],"length":7305,"saved":false}
{"ts":1353098180308,"patch":[[{"diffs":[[0,"ocale)\r\n"],[1,"{\r\n    "],[0,"\r\nvoid n"]],"start1":6025,"start2":6025,"length1":16,"length2":23}]],"length":7312,"saved":false}
{"ts":1353098181641,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"}\r\n"],[0,"void nod"]],"start1":6034,"start2":6034,"length1":16,"length2":19}]],"length":7315,"saved":false}
{"ts":1353098182801,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[1,"\r\n"],[0,"void nod"]],"start1":6037,"start2":6037,"length1":16,"length2":18}]],"length":7317,"saved":false}
{"ts":1353098185810,"patch":[[{"diffs":[[0,"locales)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\n\r\n// P"]],"start1":6118,"start2":6118,"length1":17,"length2":28}]],"length":7328,"saved":false}
{"ts":1353098189290,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"ret"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5580,"start2":5580,"length1":32,"length2":35}]],"length":7331,"saved":false}
{"ts":1353098191716,"patch":[[{"diffs":[[0,"\n    ret"],[1,"urn 0;"],[0,"\r\n}\r\n\r\n/"]],"start1":5591,"start2":5591,"length1":16,"length2":22}]],"length":7337,"saved":false}
{"ts":1353098197497,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n    \r\n/"]],"start1":5802,"start2":5802,"length1":24,"length2":33}]],"length":7346,"saved":false}
{"ts":1353098203474,"patch":[[{"diffs":[[0,"nterest)"],[-1,";"],[1,"\r\n{\r\n    "],[0,"\r\nvoid n"]],"start1":6378,"start2":6378,"length1":17,"length2":25}]],"length":7354,"saved":false}
{"ts":1353098205687,"patch":[[{"diffs":[[0,"st)\r\n{\r\n"],[-1,"    "],[1,"}\r\n"],[0,"\r\nvoid n"]],"start1":6383,"start2":6383,"length1":20,"length2":19}]],"length":7353,"saved":false}
{"ts":1353098207045,"patch":[[{"diffs":[[0,"st)\r\n{\r\n"],[1,"    \r\n"],[0,"}\r\n\r\nvoi"]],"start1":6383,"start2":6383,"length1":16,"length2":22}]],"length":7359,"saved":false}
{"ts":1353098211858,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// P"]],"start1":6487,"start2":6487,"length1":17,"length2":18}]],"length":7360,"saved":false}
{"ts":1353098212490,"patch":[[{"diffs":[[0,"rests)\r\n"],[1,"}\r\n"],[0,"\r\n\r\n// P"]],"start1":6489,"start2":6489,"length1":16,"length2":19}]],"length":7363,"saved":false}
{"ts":1353098215174,"patch":[[{"diffs":[[0,"rests)\r\n"],[-1,"}"],[1,"{\r\n    "],[0,"\r\n"],[1,"}"],[0,"\r\n\r\n// P"]],"start1":6489,"start2":6489,"length1":19,"length2":26}]],"length":7370,"saved":false}
{"ts":1353098219584,"patch":[[{"diffs":[[0,"ability)"],[-1,";"],[1,"\r\n{\r\n    \r\n}"],[0,"\r\nvoid n"]],"start1":6752,"start2":6752,"length1":17,"length2":28}]],"length":7381,"saved":false}
{"ts":1353098221219,"patch":[[{"diffs":[[0,"ilities)"],[-1,";"],[1,"\r\n"],[0,"\r\n\r\n// P"]],"start1":6868,"start2":6868,"length1":17,"length2":18}]],"length":7382,"saved":false}
{"ts":1353098223297,"patch":[[{"diffs":[[0,"ities)\r\n"],[1,"{\r\n    \r\n}"],[0,"\r\n\r\n// P"]],"start1":6870,"start2":6870,"length1":16,"length2":26}]],"length":7392,"saved":false}
{"ts":1353098224551,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[1,"\r\n"],[0,"void nod"]],"start1":6766,"start2":6766,"length1":16,"length2":18}]],"length":7394,"saved":false}
{"ts":1353098228220,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n{"],[0,"\r\nvoid n"]],"start1":7230,"start2":7230,"length1":17,"length2":19}]],"length":7396,"saved":false}
{"ts":1353098229237,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n"],[1,"    \r\n    \r\n"],[0,"void nod"]],"start1":7235,"start2":7235,"length1":16,"length2":28}]],"length":7408,"saved":false}
{"ts":1353098230595,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    "],[1,"}\r\n"],[0,"\r\nvoid n"]],"start1":7241,"start2":7241,"length1":20,"length2":19}]],"length":7407,"saved":false}
{"ts":1353098233380,"patch":[[{"diffs":[[0,"apabilities)"],[-1,";"],[1,"\r\n"],[0,"\r\n    \r\n"]],"start1":7386,"start2":7386,"length1":21,"length2":22}]],"length":7408,"saved":false}
{"ts":1353098233951,"patch":[[{"diffs":[[0,"ities)\r\n"],[1,"{\r\n    "],[0,"\r\n    \r\n"]],"start1":7392,"start2":7392,"length1":16,"length2":23}]],"length":7415,"saved":false}
{"ts":1353098235287,"patch":[[{"diffs":[[0,")\r\n{\r\n    \r\n"],[1,"}\r\n"],[0,"    \r\n"]],"start1":7397,"start2":7397,"length1":18,"length2":21}]],"length":7418,"saved":false}
{"ts":1353098309343,"patch":[[{"diffs":[[0,"ilites)\r\n{\r\n    "],[1,"return 9"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5383,"start2":5383,"length1":32,"length2":40}]],"length":7426,"saved":false}
{"ts":1353098309833,"patch":[[{"diffs":[[0,"urn "],[-1,"9"],[1,"0"],[0,"\r\n}\r"]],"start1":5402,"start2":5402,"length1":9,"length2":9}]],"length":7426,"saved":false}
{"ts":1353098310757,"patch":[[{"diffs":[[0,"return 0"],[1,";"],[0,"\r\n}\r\n\r\n/"]],"start1":5399,"start2":5399,"length1":16,"length2":17}]],"length":7427,"saved":false}
{"ts":1353098313744,"patch":[[{"diffs":[[0,"bility)\r\n{\r\n    "],[1,"return 0"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5235,"start2":5235,"length1":32,"length2":40}]],"length":7435,"saved":false}
{"ts":1353098315202,"patch":[[{"diffs":[[0,"return 0"],[1,";"],[0,"\r\n}\r\n\r\n/"]],"start1":5251,"start2":5251,"length1":16,"length2":17}]],"length":7436,"saved":false}
{"ts":1353098317777,"patch":[[{"diffs":[[0,"ocales)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":5120,"start2":5120,"length1":32,"length2":41}]],"length":7445,"saved":false}
{"ts":1353098321593,"patch":[[{"diffs":[[0,"locale)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":4954,"start2":4954,"length1":32,"length2":41}]],"length":7454,"saved":false}
{"ts":1353098324303,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"return 0;"],[0,"\r\n}\r\n\r\n// Return"]],"start1":4811,"start2":4811,"length1":32,"length2":41}]],"length":7463,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353099517795,"patch":[[{"diffs":[[0,"k.h\"\r\n\r\n"],[1,"static "],[0,"address_"]],"start1":25,"start2":25,"length1":16,"length2":23},{"diffs":[[0,"{\r\n    \r\n}\r\n"],[-1,"    "],[1,"\r\nvoid nodesInAddressBook(uint16 *networkAddresses)\r\n{\r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        networkAddress[i] = addressBook[i].networkAddress;\r\n        \r\n    }\r\n    \r\n}"],[0,"\r\n"]],"start1":7452,"start2":7452,"length1":18,"length2":211}]],"length":7663,"saved":false}
{"ts":1353099831691,"patch":[[{"diffs":[[0,"\r\n{\r\n    \r\n}\r\n\r\n"],[1,"// Returns a list of all nodes in the network\r\n"],[0,"void nodesInAddr"]],"start1":7450,"start2":7450,"length1":32,"length2":79},{"diffs":[[0,"resses)\r\n{\r\n"],[1,"    uint8 i = 0;\r\n    \r\n"],[0,"    for (i ="]],"start1":7555,"start2":7555,"length1":24,"length2":48},{"diffs":[[0,"H; i++)\r\n    {\r\n"],[1,"        if (addressBook[i].locale != 0)\r\n        {\r\n    "],[0,"        networkA"]],"start1":7632,"start2":7632,"length1":32,"length2":88},{"diffs":[[0,"    "],[-1,"\r\n    }\r\n    \r\n}"],[1,"    \r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\n// Returns the number of interests a node has\r\nuint8 numNodeInterests(uint16 networkAddress)\r\n{\r\n    uint8 i = 0;\r\n    uint8 result = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].numInterests;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n// Writes a list of interests a node has to the passed in pointer\r\nvoid nodeInterests(uint8 *interests, uint16 networkAddress)\r\n{\r\n    \r\n}\r\n"],[0,"\r\n"]],"start1":7768,"start2":7768,"length1":22,"length2":631}]],"length":8399,"saved":false}
{"ts":1353099957059,"patch":[[{"diffs":[[0,"ddress)\r\n{\r\n"],[1,"    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            for (j = 0; j < addressBook[i].numInterests; j++)\r\n            {\r\n                interests[j] = addressBook[i].interests[j];\r\n                \r\n            }\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\n"]],"start1":8376,"start2":8376,"length1":23,"length2":432}]],"length":8808,"saved":false}
{"ts":1353101342445,"patch":[[{"diffs":[[0,"kAddress"],[1,"es"],[0,"[i] = ad"]],"start1":7718,"start2":7718,"length1":16,"length2":18}]],"length":8810,"saved":false}
{"ts":1353107461858,"patch":[[{"diffs":[[0,"mAddress"],[-1,"Book"],[0,"Entries("]],"start1":2189,"start2":2189,"length1":20,"length2":16}]],"length":8806,"saved":false}
{"ts":1353108232608,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY\r\n    \r\n    \r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":4818,"start2":4818,"length1":33,"length2":133}]],"length":8906,"saved":false}
{"ts":1353108526729,"patch":[[{"diffs":[[0,";\r\n    uint8 i ="],[1," 0, j = 0, k ="],[0," 0;\r\n    \r\n    f"]],"start1":4846,"start2":4846,"length1":32,"length2":46},{"diffs":[[0,"; i < MY"],[1,"_ADDRESS_BOOK_LENGTH; i++)"],[0,"\r\n    "],[1,"{"],[0,"\r\n    "],[1,"    for (j = 0; j < numInterests; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numInterests; k++)\r\n            {\r\n                if (addressBook[i].interests[k] == interests[j])\r\n                {\r\n                    // If a match is found, increment count and break k-for-loop\r\n                    result += 1;\r\n                    \r\n                    break;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n    \r\n"]],"start1":4901,"start2":4901,"length1":28,"length2":549},{"diffs":[[0,"es)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numCapabilities; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numcapabilities; k++)\r\n            {\r\n                if (addressBook[i].capabilities[k] == capabilities[j])\r\n                {\r\n                    // If a match is found, increment count and break k-for-loop\r\n                    result += 1;\r\n                    \r\n                    break;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":6061,"start2":6061,"length1":33,"length2":680}]],"length":10088,"saved":false}
{"ts":1353108895893,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        if (addressBook[i].locale == interest)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n"],[0,"    "]],"start1":4486,"start2":4486,"length1":118,"length2":8},{"diffs":[[0,"le)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            result += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":5495,"start2":5495,"length1":33,"length2":286}]],"length":10231,"saved":false}
{"ts":1353108958371,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numLocales; j++)\r\n        {\r\n            if (addressBook[i].locale == locales[j])\r\n            {\r\n                result += 1;\r\n                \r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":5923,"start2":5923,"length1":33,"length2":430}]],"length":10628,"saved":false}
{"ts":1353109040593,"patch":[[{"diffs":[[0,"ty)\r\n{\r\n    "],[-1,"return 0;"],[1,"uint8 result = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numCapabilities; j++)\r\n        {\r\n            if (addressBook[i].capabilities[j] == capability)\r\n            {\r\n                result += 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n// Re"]],"start1":6444,"start2":6444,"length1":33,"length2":441}]],"length":11036,"saved":false}
{"ts":1353109613487,"patch":[[{"diffs":[[0,"locale)\r\n{\r\n"],[1,"    uint8 i = 0, j = 0;\r\n    uint8 nodesFound = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            networkAddress[nodesFound] = addressBook[i].locale;\r\n            \r\n            nodesFound += 1;\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":8320,"start2":8320,"length1":24,"length2":347}]],"length":11359,"saved":false}
{"ts":1353109673120,"patch":[[{"diffs":[[0,"ocales)\r\n{\r\n    "],[1,"uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numLocales; j++)\r\n        {\r\n            if (addressBook[i].locale == locales[j])\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n}\r\n\r\n// Popula"]],"start1":8738,"start2":8738,"length1":32,"length2":469}]],"length":11796,"saved":false}
{"ts":1353109681508,"patch":[[{"diffs":[[0,"Book[i]."],[-1,"locale"],[1,"networkAddress"],[0,";\r\n     "]],"start1":8552,"start2":8552,"length1":22,"length2":30}]],"length":11804,"saved":false}
{"ts":1353109782907,"patch":[[{"diffs":[[0,"terest)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numInterests; j++)\r\n        {\r\n            if (addressBook[i].interests[j] == interest)\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":9425,"start2":9425,"length1":24,"length2":488}]],"length":12268,"saved":false}
{"ts":1353109813578,"patch":[[{"diffs":[[0,"kAddress"],[1,"es"],[0,"[nodesFo"]],"start1":8522,"start2":8522,"length1":16,"length2":18}]],"length":12270,"saved":false}
{"ts":1353109884003,"patch":[[{"diffs":[[0,"erests)\r\n{\r\n    "],[1,"uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numInterests; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numInterests; k++)\r\n            {\r\n                if (addressBook[i].interests[k] == interests[j])\r\n                {\r\n                    networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                    \r\n                    nodesFound += 1;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;"],[0,"\r\n}\r\n\r\n// Popula"]],"start1":10000,"start2":10000,"length1":32,"length2":651}]],"length":12889,"saved":false}
{"ts":1353109991418,"patch":[[{"diffs":[[0,"bility)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < addressBook[i].numCapabilities; j++)\r\n        {\r\n            if (addressBook[i].capabilities[j] == capability)\r\n            {\r\n                networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                \r\n                nodesFound += 1;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\nv"]],"start1":10884,"start2":10884,"length1":24,"length2":496}]],"length":13361,"saved":false}
{"ts":1353110053116,"patch":[[{"diffs":[[0,"pabilities)\r\n{\r\n"],[1,"    uint8 nodesFound = 0;\r\n    uint8 i = 0, j = 0, k = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        for (j = 0; j < numCapabilities; j++)\r\n        {\r\n            for (k = 0; k < addressBook[i].numcapabilities; k++)\r\n            {\r\n                if (addressBook[i].capabilities[k] == capabilities[j])\r\n                {\r\n                    networkAddresses[nodesFound] = addressBook[i].networkAddress;\r\n                    \r\n                    nodesFound += 1;\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n"],[0,"    \r\n}\r\n\r\n// Po"]],"start1":11470,"start2":11470,"length1":32,"length2":643}]],"length":13972,"saved":false}
{"ts":1353110121756,"patch":[[{"diffs":[[0,"numInter"],[1,"e"],[0,"sts, uin"]],"start1":4681,"start2":4681,"length1":16,"length2":17}]],"length":13973,"saved":false}
{"ts":1353110138106,"patch":[[{"diffs":[[0,"dressBook[i].num"],[-1,"c"],[1,"C"],[0,"apabilities; k++"]],"start1":7224,"start2":7224,"length1":33,"length2":33}]],"length":13973,"saved":false}
{"ts":1353110159230,"patch":[[{"diffs":[[0,"apabilit"],[1,"i"],[0,"es)\r\n{\r\n"]],"start1":7002,"start2":7002,"length1":16,"length2":17}]],"length":13974,"saved":false}
{"ts":1353110173251,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    return result;\r\n    \r\n"],[0,"}\r\n\r"]],"start1":7651,"start2":7651,"length1":34,"length2":8}]],"length":13948,"saved":false}
{"ts":1353110197375,"patch":[[{"diffs":[[0,"k[i].num"],[-1,"c"],[1,"V"],[0,"apabilit"]],"start1":11680,"start2":11680,"length1":17,"length2":17}]],"length":13948,"saved":false}
{"ts":1353110218192,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    return result;\r\n"],[0,"}\r\n\r\n// "]],"start1":10585,"start2":10585,"length1":36,"length2":16}]],"length":13928,"saved":false}
{"ts":1353110230326,"patch":[[{"diffs":[[0,".num"],[-1,"V"],[1,"C"],[0,"apab"]],"start1":11664,"start2":11664,"length1":9,"length2":9}]],"length":13928,"saved":false}
{"ts":1353110269769,"patch":[[{"diffs":[[0,";\r\n    uint8 i ="],[-1," 0, j ="],[0," 0;\r\n    \r\n    f"]],"start1":5524,"start2":5524,"length1":39,"length2":32},{"diffs":[[0,"{\r\n    uint8 i ="],[-1," 0, j ="],[0," 0;\r\n    uint8 n"]],"start1":8298,"start2":8298,"length1":39,"length2":32}]],"length":13914,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353832986045,"patch":[[{"diffs":[[0,"es)\r\n{\r\n    "],[1,".. TO"],[0,"\r\n}\r\n\r\n// Re"]],"start1":12551,"start2":12551,"length1":24,"length2":29}]],"length":13919,"saved":false}
{"ts":1353832992654,"patch":[[{"diffs":[[0,"    "],[-1,".."],[1,"//"],[0," TO"],[1,"DO: Write thj"],[0,"\r\n}\r"]],"start1":12559,"start2":12559,"length1":13,"length2":26}]],"length":13932,"saved":false}
{"ts":1353832993670,"patch":[[{"diffs":[[0,"Write th"],[-1,"j"],[1,"is"],[0,"\r\n}\r\n\r\n/"]],"start1":12572,"start2":12572,"length1":17,"length2":18}]],"length":13933,"saved":false}
{"ts":1353832998948,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// Write tjos"],[0,"\r\n}\r\n\r\nvoid "]],"start1":12391,"start2":12391,"length1":24,"length2":37}]],"length":13946,"saved":false}
{"ts":1353833001886,"patch":[[{"diffs":[[0,"\n    // "],[1,"TODO"],[0,"Write tj"]],"start1":12398,"start2":12398,"length1":16,"length2":20}]],"length":13950,"saved":false}
{"ts":1353833004639,"patch":[[{"diffs":[[0," // TODO"],[1,": "],[0,"Write tj"]],"start1":12402,"start2":12402,"length1":16,"length2":18}]],"length":13952,"saved":false}
{"ts":1353833005202,"patch":[[{"diffs":[[0,"rite tjo"],[-1,"s"],[0,"\r\n}\r\n\r\nv"]],"start1":12413,"start2":12413,"length1":17,"length2":16}]],"length":13951,"saved":false}
{"ts":1353833006423,"patch":[[{"diffs":[[0," Write t"],[-1,"j"],[0,"o\r\n}\r\n\r\n"]],"start1":12411,"start2":12411,"length1":17,"length2":16}]],"length":13950,"saved":false}
{"ts":1353833007691,"patch":[[{"diffs":[[0,"Write to"],[1,"do"],[0,"\r\n}\r\n\r\nv"]],"start1":12412,"start2":12412,"length1":16,"length2":18}]],"length":13952,"saved":false}
{"ts":1353833009268,"patch":[[{"diffs":[[0,"te t"],[-1,"odo"],[1,"jos"],[0,"\r\n}\r"]],"start1":12415,"start2":12415,"length1":11,"length2":11}]],"length":13952,"saved":false}
{"ts":1353833011156,"patch":[[{"diffs":[[0,"te t"],[-1,"jo"],[1,"hi"],[0,"s\r\n}"]],"start1":12415,"start2":12415,"length1":10,"length2":10}]],"length":13952,"saved":false}
{"ts":1353833832958,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Interest"],[1,"Capabilitie"],[0,"s(uint8 numL"]],"start1":7735,"start2":7735,"length1":32,"length2":35},{"diffs":[[0,"lities(uint8 num"],[-1,"Local"],[1,"Capabiliti"],[0,"es, uint8 *local"]],"start1":7753,"start2":7753,"length1":37,"length2":42},{"diffs":[[0,"nt8 "],[-1,"numInterests, uint8 *interest"],[1,"*capabilitie"],[0,"s)\r\n"]],"start1":7807,"start2":7807,"length1":37,"length2":20}]],"length":13943,"saved":false}
{"ts":1353833835393,"patch":[[{"diffs":[[0,"lities(uint8 num"],[-1,"Local"],[1,"Capabiliti"],[0,"es, uint8 *local"]],"start1":7953,"start2":7953,"length1":37,"length2":42},{"diffs":[[0,"s, \r\n   "],[-1," uint8 numCapabilities,"],[0," uint8 *"]],"start1":7996,"start2":7996,"length1":39,"length2":16}]],"length":13925,"saved":false}
{"ts":1353833840043,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Capabilitie"],[1,"Interest"],[0,"s(uint8 numC"]],"start1":7735,"start2":7735,"length1":35,"length2":32}]],"length":13922,"saved":false}
{"ts":1353833849282,"patch":[[{"diffs":[[0,"ts(uint8 num"],[-1,"Capabilitie"],[1,"Interest"],[0,"s, uint8 *lo"]],"start1":7754,"start2":7754,"length1":35,"length2":32}]],"length":13919,"saved":false}
{"ts":1353833852848,"patch":[[{"diffs":[[0,"\n    uint8 *"],[-1,"capabilitie"],[1,"Interest"],[0,"s)\r\n{\r\n    r"]],"start1":7794,"start2":7794,"length1":35,"length2":32}]],"length":13916,"saved":false}
{"ts":1353833854252,"patch":[[{"diffs":[[0," uint8 *"],[-1,"I"],[1,"i"],[0,"nterests"]],"start1":7798,"start2":7798,"length1":17,"length2":17}]],"length":13916,"saved":false}
{"ts":1353833857338,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[-1,"return 0;"],[1,"// T"],[0,"\r\n}\r\n\r\n// Re"]],"start1":7813,"start2":7813,"length1":33,"length2":28}]],"length":13911,"saved":false}
{"ts":1353833859198,"patch":[[{"diffs":[[0,"    // T"],[1,"ODO: Write "],[0,"\r\n}\r\n\r\n/"]],"start1":7821,"start2":7821,"length1":16,"length2":27}]],"length":13922,"saved":false}
{"ts":1353833860609,"patch":[[{"diffs":[[0,": Write "],[1,"this"],[0,"\r\n}\r\n\r\n/"]],"start1":7832,"start2":7832,"length1":16,"length2":20}]],"length":13926,"saved":false}
{"ts":1353833861927,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[0,"\r\n}\r\n\r\n/"]],"start1":7817,"start2":7817,"length1":35,"length2":16}]],"length":13907,"saved":false}
{"ts":1353833863611,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// TODO: Write this"],[0,"\r\n}\r\n\r\n// Re"]],"start1":7813,"start2":7813,"length1":24,"length2":43}]],"length":13926,"saved":false}
{"ts":1353833865818,"patch":[[{"diffs":[[0,"    "],[-1,"return 0;"],[1,"// TODO: Write this"],[0,"\r\n}\r"]],"start1":8031,"start2":8031,"length1":17,"length2":27}]],"length":13936,"saved":false}
{"ts":1353833897164,"patch":[[{"diffs":[[0,"sts(uint"],[-1,"16 *networkAddresse"],[1,"8 numInterest"],[0,"s, uint8"]],"start1":12272,"start2":12272,"length1":35,"length2":29},{"diffs":[[0,"nt8 "],[-1,"numL"],[1,"*l"],[0,"ocales,"],[1," "],[0,"\r\n   "],[-1," uint8 *locales, uint8 numInterests,"],[0," uin"]],"start1":12298,"start2":12298,"length1":60,"length2":23}]],"length":13893,"saved":false}
{"ts":1353833911190,"patch":[[{"diffs":[[0,"uint"],[-1,"16 *networkAddresses, uint8 numLocales,\r\n    uint8 *locales, uint8 numCapabilities,"],[1,"8 numCapabilities, uint8 *locales, \r\n   "],[0," uin"]],"start1":12406,"start2":12406,"length1":91,"length2":48}]],"length":13850,"saved":false}
{"ts":1353834241674,"patch":[[{"diffs":[[0,"nLocalesWith"],[-1,"Capabilities("],[1,"Interests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *locales, uint8 *interests);\r\nvoid nodesInLocalesWithCapabilities(uint16 *networkAddresses, \r\n    "],[0,"uint8 numCap"]],"start1":12381,"start2":12381,"length1":37,"length2":190},{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *capabilit"]],"start1":12582,"start2":12582,"length1":38,"length2":32},{"diffs":[[0,"8 *capabilities)"],[1,";"],[0,"\r\n{\r\n    // TODO"]],"start1":12602,"start2":12602,"length1":32,"length2":33}]],"length":13998,"saved":false}
{"ts":1353834243820,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"void nodesInLocalesWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 *locales, uint8 *interests);\r\n"],[0,"void"]],"start1":12366,"start2":12366,"length1":129,"length2":8}]],"length":13877,"saved":false}
{"ts":1353834245937,"patch":[[{"diffs":[[0,"esWithInterests("],[1,"uint16 *networkAddresses, "],[0,"uint8 numInteres"]],"start1":12260,"start2":12260,"length1":32,"length2":58},{"diffs":[[0,"8 numInterests, "],[1,"\r\n    "],[0,"uint8 *locales, "]],"start1":12306,"start2":12306,"length1":32,"length2":38},{"diffs":[[0,"uint8 *locales, "],[-1,"\r\n    "],[0,"uint8 *interests"]],"start1":12328,"start2":12328,"length1":38,"length2":32},{"diffs":[[0,"int8 *interests)"],[1,";"],[0,"\r\n{\r\n    // TODO"]],"start1":12345,"start2":12345,"length1":32,"length2":33}]],"length":13904,"saved":false}
{"ts":1353834248709,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[0,"\r\n{\r\n   "]],"start1":12353,"start2":12353,"length1":17,"length2":16},{"diffs":[[0,"ilities)"],[-1,";"],[0,"\r\n{\r\n   "]],"start1":12515,"start2":12515,"length1":17,"length2":16}]],"length":13902,"saved":false}
{"ts":1353835543807,"patch":[[{"diffs":[[0,"been allocated.\r"],[1,"\n\r\nvoid nodesInLocaleWithInterests(uint16 *networkAddresses, uint8 numInterests, \r\n    uint8 locale, uint8 *interests);\r"],[0,"\nvoid nodesInLoc"]],"start1":12226,"start2":12226,"length1":32,"length2":152}]],"length":14022,"saved":false}
{"ts":1353835547858,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n    {"],[0,"\r\nvoid n"]],"start1":12352,"start2":12352,"length1":17,"length2":23}]],"length":14028,"saved":false}
{"ts":1353835549042,"patch":[[{"diffs":[[0,"\n    {\r\n"],[1,"        \r\n    }\r\n"],[0,"void nod"]],"start1":12361,"start2":12361,"length1":16,"length2":33}]],"length":14045,"saved":false}
{"ts":1353835551151,"patch":[[{"diffs":[[0,"s)\r\n"],[-1,"    "],[0,"{\r\n    "],[-1,"  "],[-1,"  \r\n    "],[1,"\r\n"],[0,"}\r\nv"]],"start1":12358,"start2":12358,"length1":29,"length2":17}]],"length":14033,"saved":false}
{"ts":1353835556207,"patch":[[{"diffs":[[0,"cated.\r\n"],[-1,"\r\n"],[0,"void nod"]],"start1":12235,"start2":12235,"length1":18,"length2":16}]],"length":14031,"saved":false}
{"ts":1353835563072,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"// TODO: Write this."],[0,"\r\n}\r\nvoid no"]],"start1":12355,"start2":12355,"length1":24,"length2":44}]],"length":14051,"saved":false}
{"ts":1353835569183,"patch":[[{"diffs":[[0,"te this."],[1,"  Should be pretty simliar to"],[0,"\r\n}\r\nvoi"]],"start1":12379,"start2":12379,"length1":16,"length2":45}]],"length":14080,"saved":false}
{"ts":1353835571734,"patch":[[{"diffs":[[0," sim"],[-1,"l"],[0,"i"],[1,"l"],[0,"ar to"],[1," "],[0,"\r\n}\r"]],"start1":12405,"start2":12405,"length1":15,"length2":16}]],"length":14081,"saved":false}
{"ts":1353835577381,"patch":[[{"diffs":[[0,"ilar to "],[1,"the following function."],[0,"\r\n}\r\nvoi"]],"start1":12409,"start2":12409,"length1":16,"length2":39}]],"length":14104,"saved":false}
{"ts":1353835634853,"patch":[[{"diffs":[[0,"erests\r\n"],[1,"uint8 numNodesInLocaleWithInterests(uint8 numInterests, uint8 locale, \r\n    uint8 *interests);\r\n"],[0,"uint8 nu"]],"start1":7712,"start2":7712,"length1":16,"length2":112}]],"length":14200,"saved":false}
{"ts":1353835638459,"patch":[[{"diffs":[[0,"terests)"],[-1,";"],[1,"\r\n{\r\n    \r\n}\r\n}"],[0,"\r\nuint8 "]],"start1":7805,"start2":7805,"length1":17,"length2":31}]],"length":14214,"saved":false}
{"ts":1353835639935,"patch":[[{"diffs":[[0,"   \r\n}\r\n"],[-1,"}"],[0,"\r\nuint8 "]],"start1":7819,"start2":7819,"length1":17,"length2":16}]],"length":14213,"saved":false}
{"ts":1353836376726,"patch":[[{"diffs":[[0,"lt;\r\n    \r\n}\r\n\r\n"],[1,"\r\n// Gets a pointer to a struct for the given address\r\naddress_entry *getAddressEntryPointer(uint16 networkAddress);\r\n\r\n\r\n"],[0,"// Returns a cou"]],"start1":3966,"start2":3966,"length1":32,"length2":154}]],"length":14335,"saved":false}
{"ts":1353836379562,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[-1,"\r\n"],[0,"// Gets "]],"start1":3974,"start2":3974,"length1":18,"length2":16}]],"length":14333,"saved":false}
{"ts":1353836382378,"patch":[[{"diffs":[[0,"Address)"],[-1,";"],[1,"\r\n{\r\n    \r\n    \r\n}"],[0,"\r\n\r\n\r\n//"]],"start1":4087,"start2":4087,"length1":17,"length2":34}]],"length":14350,"saved":false}
{"ts":1353836384400,"patch":[[{"diffs":[[0,"   \r\n    \r\n}\r\n\r\n"],[-1,"\r\n"],[0,"// Returns a cou"]],"start1":4101,"start2":4101,"length1":34,"length2":32}]],"length":14348,"saved":false}
{"ts":1353836389577,"patch":[[{"diffs":[[0,"ss)\r\n{\r\n    "],[1,"uint32 result = 0;\r\n    uint8 i = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].networkAddress == networkAddress)\r\n        {\r\n            result = addressBook[i].macHi;\r\n            \r\n            break;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;"],[0,"\r\n    \r\n}\r\n\r"]],"start1":4092,"start2":4092,"length1":24,"length2":342}]],"length":14666,"saved":false}
{"ts":1353836403357,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"uint32 result = 0;"],[1,"address_entry"],[0,"\r\n    ui"]],"start1":4096,"start2":4096,"length1":34,"length2":29}]],"length":14661,"saved":false}
{"ts":1353836405268,"patch":[[{"diffs":[[0,"ddress_entry"],[1," *resu"],[0,"\r\n    uint8 "]],"start1":4105,"start2":4105,"length1":24,"length2":30}]],"length":14667,"saved":false}
{"ts":1353836406524,"patch":[[{"diffs":[[0,"ry *resu"],[1,"lt;"],[0,"\r\n    ui"]],"start1":4115,"start2":4115,"length1":16,"length2":19}]],"length":14670,"saved":false}
{"ts":1353836412352,"patch":[[{"diffs":[[0,"lt = addressBook"],[-1,"[i]"],[0,".macHi;\r\n       "]],"start1":4298,"start2":4298,"length1":35,"length2":32}]],"length":14667,"saved":false}
{"ts":1353836414454,"patch":[[{"diffs":[[0,"ressBook"],[-1,".macHi"],[0,";\r\n     "]],"start1":4306,"start2":4306,"length1":22,"length2":16}]],"length":14661,"saved":false}
{"ts":1353836530369,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"static "],[0,"addr"]],"start1":29,"start2":29,"length1":15,"length2":8}]],"length":14654,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353839640778,"patch":[[{"diffs":[[1,"dispatching th"],[0,"\r\n\r\n#include"]],"start1":0,"start2":0,"length1":12,"length2":26}]],"length":14668,"saved":false}
{"ts":1353839644906,"patch":[[{"diffs":[[0,"ching th"],[1,"e war rocket ajax to "],[0,"\r\n\r\n#inc"]],"start1":6,"start2":6,"length1":16,"length2":37}]],"length":14689,"saved":false}
{"ts":1353839649192,"patch":[[{"diffs":[[0,"ajax to "],[1,"return his body."],[0,"\r\n\r\n#inc"]],"start1":27,"start2":27,"length1":16,"length2":32}]],"length":14705,"saved":false}
{"ts":1353839651844,"patch":[[{"diffs":[[-1,"dispatching the war rocket ajax to return his body."],[0,"\r\n\r\n"]],"start1":0,"start2":0,"length1":55,"length2":4}]],"length":14654,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353890374083,"patch":[[{"diffs":[[0," \r\n    }\r\n    \r\n"],[1,"    return result;\r\n    \r\n"],[0,"}\r\n\r\n// Returns "]],"start1":8073,"start2":8073,"length1":32,"length2":58}]],"length":14680,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353970458748,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"uint8 "],[0,"\r\n}\r\n\r\nuint8"]],"start1":8277,"start2":8277,"length1":24,"length2":30}]],"length":14686,"saved":false}
{"ts":1353970463367,"patch":[[{"diffs":[[0,"  uint8 "],[1,"i = 0;\r\n    \r\n    for i"],[0,"\r\n}\r\n\r\nu"]],"start1":8287,"start2":8287,"length1":16,"length2":39}]],"length":14709,"saved":false}
{"ts":1353970464449,"patch":[[{"diffs":[[0,"    for "],[-1,"i"],[1,"()"],[0,"\r\n}\r\n\r\nu"]],"start1":8309,"start2":8309,"length1":17,"length2":18}]],"length":14710,"saved":false}
{"ts":1353970465851,"patch":[[{"diffs":[[0,"   for ("],[1,"i = 0; "],[0,")\r\n}\r\n\r\n"]],"start1":8310,"start2":8310,"length1":16,"length2":23}]],"length":14717,"saved":false}
{"ts":1353970467623,"patch":[[{"diffs":[[0," (i = 0;"],[1," i <"],[0," )\r\n}\r\n\r"]],"start1":8316,"start2":8316,"length1":16,"length2":20}]],"length":14721,"saved":false}
{"ts":1353970473133,"patch":[[{"diffs":[[0," 0; i < "],[1,"MY_ADDRESS_BOOK_"],[0,")\r\n}\r\n\r\n"]],"start1":8321,"start2":8321,"length1":16,"length2":32}]],"length":14737,"saved":false}
{"ts":1353970475192,"patch":[[{"diffs":[[0,"SS_BOOK_"],[1,"LENGTH; i"],[0,")\r\n}\r\n\r\n"]],"start1":8337,"start2":8337,"length1":16,"length2":25}]],"length":14746,"saved":false}
{"ts":1353970476354,"patch":[[{"diffs":[[0,"ENGTH; i"],[1,"++"],[0,")\r\n}\r\n\r\n"]],"start1":8346,"start2":8346,"length1":16,"length2":18}]],"length":14748,"saved":false}
{"ts":1353970477438,"patch":[[{"diffs":[[0,"; i++)\r\n"],[1,"    {\r\n        \r\n    }\r\n"],[0,"}\r\n\r\nuin"]],"start1":8351,"start2":8351,"length1":16,"length2":40}]],"length":14772,"saved":false}
{"ts":1353970479076,"patch":[[{"diffs":[[0,"      \r\n    "],[-1,"}"],[1,"    \r\n    }\r\n    "],[0,"\r\n}\r\n\r\nuint8"]],"start1":8368,"start2":8368,"length1":25,"length2":41}]],"length":14788,"saved":false}
{"ts":1353970481343,"patch":[[{"diffs":[[0,"   }\r\n    \r\n"],[1,"    retu\r\n"],[0,"}\r\n\r\nuint8 n"]],"start1":8387,"start2":8387,"length1":24,"length2":34}]],"length":14798,"saved":false}
{"ts":1353970482982,"patch":[[{"diffs":[[0,"    retu"],[1,"rn result;"],[0,"\r\n}\r\n\r\nu"]],"start1":8399,"start2":8399,"length1":16,"length2":26}]],"length":14808,"saved":false}
{"ts":1353970487177,"patch":[[{"diffs":[[0,"{\r\n    uint8 i ="],[1," 0, result ="],[0," 0;\r\n    \r\n    f"]],"start1":8282,"start2":8282,"length1":32,"length2":44}]],"length":14820,"saved":false}
{"ts":1353970493034,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"if "],[0,"\r\n        \r\n    "]],"start1":8370,"start2":8370,"length1":32,"length2":35}]],"length":14823,"saved":false}
{"ts":1353970500214,"patch":[[{"diffs":[[0,"     if "],[1,"addressBook[i].l"],[0,"\r\n      "]],"start1":8381,"start2":8381,"length1":16,"length2":32}]],"length":14839,"saved":false}
{"ts":1353970500773,"patch":[[{"diffs":[[0,"ook[i].l"],[1,"ocale"],[0,"\r\n      "]],"start1":8397,"start2":8397,"length1":16,"length2":21}]],"length":14844,"saved":false}
{"ts":1353970502165,"patch":[[{"diffs":[[0,"].locale"],[1," == "],[0,"\r\n      "]],"start1":8402,"start2":8402,"length1":16,"length2":20}]],"length":14848,"saved":false}
{"ts":1353970504933,"patch":[[{"diffs":[[0,"\n        if "],[1,"("],[0,"addressBook["]],"start1":8377,"start2":8377,"length1":24,"length2":25}]],"length":14849,"saved":false}
{"ts":1353970507896,"patch":[[{"diffs":[[0,"cale == "],[1,"locale)\r\n        "],[0,"\r\n      "]],"start1":8407,"start2":8407,"length1":16,"length2":33}]],"length":14866,"saved":false}
{"ts":1353970509127,"patch":[[{"diffs":[[0,"ocale)\r\n        "],[1,"{\r\n            \r\n            \r\n        }"],[0,"\r\n        \r\n    "]],"start1":8416,"start2":8416,"length1":32,"length2":72}]],"length":14906,"saved":false}
{"ts":1353970597343,"patch":[[{"diffs":[[0,"        \r\n    }\r\n    \r\n}\r\n\r\n"],[1,"\r\n"]],"start1":14878,"start2":14878,"length1":28,"length2":30}]],"length":14908,"saved":false}
{"ts":1353970598814,"patch":[[{"diffs":[[0,"        \r\n    }\r\n    \r\n}\r\n\r\n"],[1,"void "],[0,"\r\n"]],"start1":14878,"start2":14878,"length1":30,"length2":35}]],"length":14913,"saved":false}
{"ts":1353970601079,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[-1,"void "],[1,"uin"],[0,"\r\n"]],"start1":14898,"start2":14898,"length1":15,"length2":13}]],"length":14911,"saved":false}
{"ts":1353970602167,"patch":[[{"diffs":[[0,"}\r\n\r\nuin"],[1,"t8 "],[0,"\r\n"]],"start1":14901,"start2":14901,"length1":10,"length2":13}]],"length":14914,"saved":false}
{"ts":1353970603537,"patch":[[{"diffs":[[0,"\r\nuint8 "],[1,"node"],[0,"\r\n"]],"start1":14904,"start2":14904,"length1":10,"length2":14}]],"length":14918,"saved":false}
{"ts":1353970605823,"patch":[[{"diffs":[[0,"nt8 node"],[1,"HasInterests()"],[0,"\r\n"]],"start1":14908,"start2":14908,"length1":10,"length2":24}]],"length":14932,"saved":false}
{"ts":1353970610783,"patch":[[{"diffs":[[0," nodeHas"],[1,"Any"],[0,"Interest"]],"start1":14911,"start2":14911,"length1":16,"length2":19}]],"length":14935,"saved":false}
{"ts":1353970612083,"patch":[[{"diffs":[[0,"eHas"],[-1,"Any"],[0,"Inte"]],"start1":14915,"start2":14915,"length1":11,"length2":8}]],"length":14932,"saved":false}
{"ts":1353970616094,"patch":[[{"diffs":[[0,"terests("],[1,"ui"],[0,")\r\n"]],"start1":14921,"start2":14921,"length1":11,"length2":13}]],"length":14934,"saved":false}
{"ts":1353970617237,"patch":[[{"diffs":[[0,"terests("],[-1,"ui"],[0,")\r\n"]],"start1":14921,"start2":14921,"length1":13,"length2":11}]],"length":14932,"saved":false}
{"ts":1353970619043,"patch":[[{"diffs":[[0,"terests("],[1,"uint8"],[0,")\r\n"]],"start1":14921,"start2":14921,"length1":11,"length2":16}]],"length":14937,"saved":false}
{"ts":1353970628110,"patch":[[{"diffs":[[0,"ts(uint8"],[1," num"],[0,")\r\n"]],"start1":14926,"start2":14926,"length1":11,"length2":15}]],"length":14941,"saved":false}
{"ts":1353970630137,"patch":[[{"diffs":[[0,"int8 num"],[1,"Interests"],[0,")\r\n"]],"start1":14930,"start2":14930,"length1":11,"length2":20}]],"length":14950,"saved":false}
{"ts":1353970632818,"patch":[[{"diffs":[[0,"nt8 numInterests"],[1,", "],[0,")\r\n"]],"start1":14931,"start2":14931,"length1":19,"length2":21}]],"length":14952,"saved":false}
{"ts":1353970634704,"patch":[[{"diffs":[[0,"erests, "],[1,"uint8 *inter"],[0,")\r\n"]],"start1":14941,"start2":14941,"length1":11,"length2":23}]],"length":14964,"saved":false}
{"ts":1353970635952,"patch":[[{"diffs":[[0,"8 *inter"],[1,"ests"],[0,")\r\n"]],"start1":14953,"start2":14953,"length1":11,"length2":15}]],"length":14968,"saved":false}
{"ts":1353970643998,"patch":[[{"diffs":[[0,"odeHasInterests("],[1,"uint16 networkAddress, "],[0,"uint8 numInteres"]],"start1":14913,"start2":14913,"length1":32,"length2":55}]],"length":14991,"saved":false}
{"ts":1353970647281,"patch":[[{"diffs":[[0,"terests, uint8 *interests)\r\n"],[1,"{\r\n    \r\n}\r\n"]],"start1":14963,"start2":14963,"length1":28,"length2":40}]],"length":15003,"saved":false}
{"ts":1353970748749,"patch":[[{"diffs":[[0,"s)\r\n{\r\n    \r\n}\r\n"],[1,"\r\n\r\n// Returns a one if the specified node has any of the passed in capabilities\r\nuint8 nodeHasCapabilities(uint16 networkAddress, uint8 numCapabilities, \r\n    uint8 *capabilities);\r\n"]],"start1":14987,"start2":14987,"length1":16,"length2":199}]],"length":15186,"saved":false}
{"ts":1353970750941,"patch":[[{"diffs":[[0,"uint8 *capabilities)"],[-1,";"],[1,"\r\n"],[0,"\r\n"]],"start1":15163,"start2":15163,"length1":23,"length2":24}]],"length":15187,"saved":false}
{"ts":1353970752223,"patch":[[{"diffs":[[0,"ities)\r\n"],[1,"{\r\n    \r\n}"],[0,"\r\n"]],"start1":15177,"start2":15177,"length1":10,"length2":20}]],"length":15197,"saved":false}
{"ts":1353970757169,"patch":[[{"diffs":[[0,"\n    \r\n}\r\n\r\n"],[1,"// Returns a one if the specified node has any of the passed in capabilities\r\n"],[0,"uint8 nodeHa"]],"start1":14894,"start2":14894,"length1":24,"length2":102}]],"length":15275,"saved":false}
{"ts":1353970758388,"patch":[[{"diffs":[[0,"e passed in "],[-1,"capabilities"],[1,"int"],[0,"\r\nuint8 node"]],"start1":14958,"start2":14958,"length1":36,"length2":27}]],"length":15266,"saved":false}
{"ts":1353970759853,"patch":[[{"diffs":[[0,"d in int"],[1,"erests"],[0,"\r\nuint8 "]],"start1":14965,"start2":14965,"length1":16,"length2":22}]],"length":15272,"saved":false}
{"ts":1353970762040,"patch":[[{"diffs":[[0,"ts)\r\n{\r\n    "],[1,"uint8 "],[0,"\r\n}\r\n\r\n\r\n// "]],"start1":15061,"start2":15061,"length1":24,"length2":30}]],"length":15278,"saved":false}
{"ts":1353970763108,"patch":[[{"diffs":[[0,"  uint8 "],[1,"i "],[0,"\r\n}\r\n\r\n\r"]],"start1":15071,"start2":15071,"length1":16,"length2":18}]],"length":15280,"saved":false}
{"ts":1353970764367,"patch":[[{"diffs":[[0,"uint8 i "],[1,"= 0."],[0,"\r\n}\r\n\r\n\r"]],"start1":15073,"start2":15073,"length1":16,"length2":20}]],"length":15284,"saved":false}
{"ts":1353970765372,"patch":[[{"diffs":[[0,"t8 i = 0"],[-1,"."],[0,"\r\n}\r\n\r\n\r"]],"start1":15076,"start2":15076,"length1":17,"length2":16}]],"length":15283,"saved":false}
{"ts":1353970766052,"patch":[[{"diffs":[[0,"t8 i = 0"],[1,", "],[0,"\r\n}\r\n\r\n\r"]],"start1":15076,"start2":15076,"length1":16,"length2":18}]],"length":15285,"saved":false}
{"ts":1353970768881,"patch":[[{"diffs":[[0," i = 0, "],[1,"k = 0;\r\n    \r\n    "],[0,"\r\n}\r\n\r\n\r"]],"start1":15078,"start2":15078,"length1":16,"length2":34}]],"length":15303,"saved":false}
{"ts":1353970775633,"patch":[[{"diffs":[[0," i = 0, k = 0;\r\n"],[1,"    result = 0;\r\n    \r\n    \r\n"],[0,"    \r\n    \r\n}\r\n\r"]],"start1":15078,"start2":15078,"length1":32,"length2":61}]],"length":15332,"saved":false}
{"ts":1353970777096,"patch":[[{"diffs":[[0,"    \r\n    \r\n    "],[1,"return resu"],[0,"\r\n    \r\n}\r\n\r\n\r\n/"]],"start1":15111,"start2":15111,"length1":32,"length2":43}]],"length":15343,"saved":false}
{"ts":1353970778158,"patch":[[{"diffs":[[0,"0;\r\n    \r\n    \r\n"],[1,"    \r\n"],[0,"    return resu\r"]],"start1":15107,"start2":15107,"length1":32,"length2":38},{"diffs":[[0,"urn resu"],[1,"lt;"],[0,"\r\n    \r\n"]],"start1":15136,"start2":15136,"length1":16,"length2":19}]],"length":15352,"saved":false}
{"ts":1353970783237,"patch":[[{"diffs":[[0,"ult = 0;\r\n    \r\n"],[1,"    for ()\r\n"],[0,"    \r\n    \r\n    "]],"start1":15101,"start2":15101,"length1":32,"length2":44}]],"length":15364,"saved":false}
{"ts":1353970785751,"patch":[[{"diffs":[[0,"   for ("],[1,"i = 0; "],[0,")\r\n    \r"]],"start1":15118,"start2":15118,"length1":16,"length2":23}]],"length":15371,"saved":false}
{"ts":1353970787131,"patch":[[{"diffs":[[0," (i = 0;"],[1," i <"],[0," )\r\n    "]],"start1":15124,"start2":15124,"length1":16,"length2":20}]],"length":15375,"saved":false}
{"ts":1353970796991,"patch":[[{"diffs":[[0," 0; i < "],[1,"numInterests'"],[0,")\r\n    \r"]],"start1":15129,"start2":15129,"length1":16,"length2":29}]],"length":15388,"saved":false}
{"ts":1353970797594,"patch":[[{"diffs":[[0,"nterests"],[1,";"],[0,"')\r\n    "]],"start1":15141,"start2":15141,"length1":16,"length2":17}]],"length":15389,"saved":false}
{"ts":1353970798196,"patch":[[{"diffs":[[0,"terests;"],[1," "],[0,"')\r\n    "]],"start1":15142,"start2":15142,"length1":16,"length2":17}]],"length":15390,"saved":false}
{"ts":1353970799065,"patch":[[{"diffs":[[0,"erests; "],[1,"o"],[0,"')\r\n    "]],"start1":15143,"start2":15143,"length1":16,"length2":17}]],"length":15391,"saved":false}
{"ts":1353970799856,"patch":[[{"diffs":[[0,"erests; "],[-1,"o"],[0,"')\r\n    "]],"start1":15143,"start2":15143,"length1":17,"length2":16}]],"length":15390,"saved":false}
{"ts":1353970802084,"patch":[[{"diffs":[[0,"erests; "],[-1,"'"],[1,"i++"],[0,")\r\n    \r"]],"start1":15143,"start2":15143,"length1":17,"length2":19}]],"length":15392,"saved":false}
{"ts":1353970803377,"patch":[[{"diffs":[[0,"ests; i++)\r\n"],[1,"    {\r\n        \r\n    }\r\n"],[0,"    \r\n    \r\n"]],"start1":15145,"start2":15145,"length1":24,"length2":48}]],"length":15416,"saved":false}
{"ts":1353970804186,"patch":[[{"diffs":[[0,"   {\r\n        \r\n"],[1,"        \r\n"],[0,"    }\r\n    \r\n   "]],"start1":15158,"start2":15158,"length1":32,"length2":42}]],"length":15426,"saved":false}
{"ts":1353970806481,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"for ()"],[0,"\r\n        \r\n    "]],"start1":15156,"start2":15156,"length1":32,"length2":38}]],"length":15432,"saved":false}
{"ts":1353970809246,"patch":[[{"diffs":[[0,"   for ("],[1,"k = 0; k"],[0,")\r\n     "]],"start1":15169,"start2":15169,"length1":16,"length2":24}]],"length":15440,"saved":false}
{"ts":1353970810010,"patch":[[{"diffs":[[0,"k = 0; k"],[1," "],[0,")\r\n     "]],"start1":15177,"start2":15177,"length1":16,"length2":17}]],"length":15441,"saved":false}
{"ts":1353970811092,"patch":[[{"diffs":[[0,"k = 0; k"],[1," <"],[0," )\r\n    "]],"start1":15177,"start2":15177,"length1":16,"length2":18}]],"length":15443,"saved":false}
{"ts":1353970816547,"patch":[[{"diffs":[[0," 0; k < "],[1,"addressBook[i]"],[0,")\r\n     "]],"start1":15180,"start2":15180,"length1":16,"length2":30}]],"length":15457,"saved":false}
{"ts":1353970817851,"patch":[[{"diffs":[[0,"sBook[i]"],[1,"."],[0,")\r\n     "]],"start1":15194,"start2":15194,"length1":16,"length2":17}]],"length":15458,"saved":false}
{"ts":1353970820486,"patch":[[{"diffs":[[0,"Book[i]."],[1,"numI"],[0,")\r\n     "]],"start1":15195,"start2":15195,"length1":16,"length2":20}]],"length":15462,"saved":false}
{"ts":1353970822325,"patch":[[{"diffs":[[0,"[i].numI"],[1,"nterests;"],[0,")\r\n     "]],"start1":15199,"start2":15199,"length1":16,"length2":25}]],"length":15471,"saved":false}
{"ts":1353970823240,"patch":[[{"diffs":[[0,"terests;"],[1," "],[0,")\r\n     "]],"start1":15208,"start2":15208,"length1":16,"length2":17}]],"length":15472,"saved":false}
{"ts":1353970824923,"patch":[[{"diffs":[[0,"erests; "],[-1,")"],[1,"k++)\r\n        {"],[0,"\r\n      "]],"start1":15209,"start2":15209,"length1":17,"length2":31}]],"length":15486,"saved":false}
{"ts":1353970826064,"patch":[[{"diffs":[[0,"++)\r\n        {\r\n"],[1,"            \r\n        }\r\n"],[0,"        \r\n    }\r"]],"start1":15218,"start2":15218,"length1":32,"length2":57}]],"length":15511,"saved":false}
{"ts":1353970826930,"patch":[[{"diffs":[[0,"\r\n            \r\n"],[1,"            \r\n"],[0,"        }\r\n     "]],"start1":15232,"start2":15232,"length1":32,"length2":46}]],"length":15525,"saved":false}
{"ts":1353970832117,"patch":[[{"diffs":[[0," {\r\n            "],[1,"if "],[0,"\r\n            \r\n"]],"start1":15230,"start2":15230,"length1":32,"length2":35}]],"length":15528,"saved":false}
{"ts":1353970835873,"patch":[[{"diffs":[[0,"     if "],[1,"interests[]"],[0,"\r\n      "]],"start1":15241,"start2":15241,"length1":16,"length2":27}]],"length":15539,"saved":false}
{"ts":1353970836734,"patch":[[{"diffs":[[0,"terests["],[1,"i"],[0,"]\r\n     "]],"start1":15251,"start2":15251,"length1":16,"length2":17}]],"length":15540,"saved":false}
{"ts":1353970837545,"patch":[[{"diffs":[[0,"rests[i]"],[1," == "],[0,"\r\n      "]],"start1":15253,"start2":15253,"length1":16,"length2":20}]],"length":15544,"saved":false}
{"ts":1353970841311,"patch":[[{"diffs":[[0,"s[i] == "],[1,"addressBook.interests[k]"],[0,"\r\n      "]],"start1":15257,"start2":15257,"length1":16,"length2":40}]],"length":15568,"saved":false}
{"ts":1353970842574,"patch":[[{"diffs":[[0,"rests[k]"],[1,")"],[0,"\r\n      "]],"start1":15281,"start2":15281,"length1":16,"length2":17}]],"length":15569,"saved":false}
{"ts":1353970846999,"patch":[[{"diffs":[[0,"     if "],[1,"("],[0,"interest"]],"start1":15241,"start2":15241,"length1":16,"length2":17}]],"length":15570,"saved":false}
{"ts":1353970848475,"patch":[[{"diffs":[[0,"erests[k])\r\n"],[1,"            {\r\n                \r\n                \r\n            }\r\n"],[0,"            "]],"start1":15281,"start2":15281,"length1":24,"length2":90}]],"length":15636,"saved":false}
{"ts":1353970851518,"patch":[[{"diffs":[[0,"                "],[1,"result = 1;"],[0,"\r\n              "]],"start1":15308,"start2":15308,"length1":32,"length2":43}]],"length":15647,"saved":false}
{"ts":1353970852772,"patch":[[{"diffs":[[0,"              \r\n"],[1,"                \r\n"],[0,"            }\r\n "]],"start1":15339,"start2":15339,"length1":32,"length2":50}]],"length":15665,"saved":false}
{"ts":1353970854284,"patch":[[{"diffs":[[0,"                "],[1,"break;"],[0,"\r\n              "]],"start1":15337,"start2":15337,"length1":32,"length2":38}]],"length":15671,"saved":false}
{"ts":1353970857114,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    \r\n"],[0,"    retu"]],"start1":15434,"start2":15434,"length1":22,"length2":16}]],"length":15665,"saved":false}
{"ts":1353970861790,"patch":[[{"diffs":[[0,"lities)\r\n{\r\n"],[1,"    uint8 i = 0, k = 0;\r\n    result = 0;\r\n    \r\n    for (i = 0; i < numInterests; i++)\r\n    {\r\n        for (k = 0; k < addressBook[i].numInterests; k++)\r\n        {\r\n            if (interests[i] == addressBook.interests[k])\r\n            {\r\n                result = 1;\r\n                break;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n"],[0,"    \r\n}\r\n"]],"start1":15644,"start2":15644,"length1":21,"length2":414}]],"length":16058,"saved":false}
{"ts":1353970868656,"patch":[[{"diffs":[[0,"= 0; i < num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s; i++)\r\n   "]],"start1":15715,"start2":15715,"length1":32,"length2":35}]],"length":16061,"saved":false}
{"ts":1353970870003,"patch":[[{"diffs":[[0,"sBook[i].num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s; k++)\r\n   "]],"start1":15784,"start2":15784,"length1":32,"length2":35}]],"length":16064,"saved":false}
{"ts":1353970873916,"patch":[[{"diffs":[[0,"        if ("],[-1,"interest"],[1,"capabilitie"],[0,"s[i] == addr"]],"start1":15831,"start2":15831,"length1":32,"length2":35},{"diffs":[[0,"addressBook."],[-1,"interest"],[1,"capabilitie"],[0,"s[k])\r\n     "]],"start1":15862,"start2":15862,"length1":32,"length2":35}]],"length":16070,"saved":false}
{"ts":1353970899748,"patch":[[{"diffs":[[0," {\r\n            "],[1,"result += "],[0,"\r\n            \r\n"]],"start1":8431,"start2":8431,"length1":32,"length2":42}]],"length":16080,"saved":false}
{"ts":1353970909890,"patch":[[{"diffs":[[0,"sult += "],[1,"nodeHasInterests(uint16 networkAddress, uint8 numInterests, \r\n    uint8 *interests);"],[0,"\r\n      "]],"start1":8449,"start2":8449,"length1":16,"length2":100}]],"length":16164,"saved":false}
{"ts":1353970915658,"patch":[[{"diffs":[[0,"terests("],[-1,"uint16 networkAddress"],[1,"addressBook[i]"],[0,", uint8 "]],"start1":8466,"start2":8466,"length1":37,"length2":30}]],"length":16157,"saved":false}
{"ts":1353970916595,"patch":[[{"diffs":[[0,"sBook[i]"],[1,".n"],[0,", uint8 "]],"start1":8480,"start2":8480,"length1":16,"length2":18}]],"length":16159,"saved":false}
{"ts":1353970919083,"patch":[[{"diffs":[[0,"ook[i].n"],[1,"etworkAddress"],[0,", uint8 "]],"start1":8482,"start2":8482,"length1":16,"length2":29}]],"length":16172,"saved":false}
{"ts":1353970920294,"patch":[[{"diffs":[[0,"networkAddress, "],[1,"\r\n                "],[0,"uint8 numInteres"]],"start1":8489,"start2":8489,"length1":32,"length2":50}]],"length":16190,"saved":false}
{"ts":1353970921101,"patch":[[{"diffs":[[0,"8 numInterests, "],[-1,"\r\n"],[0,"    uint8 *inter"]],"start1":8527,"start2":8527,"length1":34,"length2":32}]],"length":16188,"saved":false}
{"ts":1353970922443,"patch":[[{"diffs":[[0,"erests, "],[-1,"    u"],[0,"int8 *in"]],"start1":8535,"start2":8535,"length1":21,"length2":16}]],"length":16183,"saved":false}
{"ts":1353970924007,"patch":[[{"diffs":[[0,"erests, "],[1,"u"],[0,"int8 *in"]],"start1":8535,"start2":8535,"length1":16,"length2":17}]],"length":16184,"saved":false}
{"ts":1353970932316,"patch":[[{"diffs":[[0,"        "],[-1,"uint8 "],[0,"numInter"]],"start1":8515,"start2":8515,"length1":22,"length2":16}]],"length":16178,"saved":false}
{"ts":1353970935922,"patch":[[{"diffs":[[0,"  numInterests, "],[-1,"uint8 *"],[0,"interests);\r\n   "]],"start1":8521,"start2":8521,"length1":39,"length2":32}]],"length":16171,"saved":false}
{"ts":1353970942030,"patch":[[{"diffs":[[0,"esult;\r\n"],[1,"    \r\n"],[0,"}\r\n\r\nuin"]],"start1":8610,"start2":8610,"length1":16,"length2":22}]],"length":16177,"saved":false}
{"ts":1353970963576,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[1,"uint8 i = 0, result = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            result += nodeHasInterests(addressBook[i].networkAddress, \r\n                numInterests, interests);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n\r\n/"]],"start1":8726,"start2":8726,"length1":35,"length2":349}]],"length":16491,"saved":false}
{"ts":1353971022148,"patch":[[{"diffs":[[0,"    "],[-1,"uint8 i = 0, result = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            result += nodeHasInterests(addressBook[i].networkAddress, \r\n                numInterests, interests);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[1,"// TODO: Write this"],[0,"\r\n}\r"]],"start1":8730,"start2":8730,"length1":341,"length2":27}]],"length":16177,"saved":false}
{"ts":1353971030710,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[1,"// Returns a count of nodes in given locales with given interests\r\nuint8 numNodesInLocaleWithInterests(uint8 numInterests, uint8 locale, \r\n    uint8 *interests)\r\n{\r\n    uint8 i = 0, result = 0;\r\n    \r\n    for (i = 0; i < MY_ADDRESS_BOOK_LENGTH; i++)\r\n    {\r\n        if (addressBook[i].locale == locale)\r\n        {\r\n            result += nodeHasInterests(addressBook[i].networkAddress, \r\n                numInterests, interests);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    \r\n}\r\n\r\n\r\n"],[0,"uint8 nu"]],"start1":8621,"start2":8621,"length1":16,"length2":527}]],"length":16688,"saved":false}
{"ts":1353971032726,"patch":[[{"diffs":[[0," \r\n}\r\n\r\n"],[-1,"\r\n"],[0,"uint8 nu"]],"start1":9130,"start2":9130,"length1":18,"length2":16}]],"length":16686,"saved":false}
{"ts":1353971038556,"patch":[[{"diffs":[[0,"InLocaleWith"],[-1,"Interest"],[1,"C"],[0,"s(uint8 numI"]],"start1":8710,"start2":8710,"length1":32,"length2":25}]],"length":16679,"saved":false}
{"ts":1353971039984,"patch":[[{"diffs":[[0,"aleWithC"],[1,"ap"],[0,"s(uint8 "]],"start1":8715,"start2":8715,"length1":16,"length2":18}]],"length":16681,"saved":false}
{"ts":1353971042139,"patch":[[{"diffs":[[0,"eWithCap"],[1,"abilitie"],[0,"s(uint8 "]],"start1":8717,"start2":8717,"length1":16,"length2":24}]],"length":16689,"saved":false}
{"ts":1353971051649,"patch":[[{"diffs":[[0,"es(uint8 num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s, uint8 loc"]],"start1":8732,"start2":8732,"length1":32,"length2":35}]],"length":16692,"saved":false}
{"ts":1353971054663,"patch":[[{"diffs":[[0,"         num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s, interests"]],"start1":9029,"start2":9029,"length1":32,"length2":35}]],"length":16695,"saved":false}
{"ts":1353971061995,"patch":[[{"diffs":[[0,"lities, "],[-1,"interest"],[1,"capabilitie"],[0,"s);\r\n   "]],"start1":9047,"start2":9047,"length1":24,"length2":27}]],"length":16698,"saved":false}
{"ts":1353971066729,"patch":[[{"diffs":[[0,"\n    uint8 *"],[-1,"interest"],[1,"capabilitie"],[0,"s)\r\n{\r\n    u"]],"start1":8773,"start2":8773,"length1":32,"length2":35}]],"length":16701,"saved":false}
{"ts":1353971080360,"patch":[[{"diffs":[[0," with given "],[-1,"interest"],[1,"capabilitie"],[0,"s\r\nuint8 num"]],"start1":8673,"start2":8673,"length1":32,"length2":35}]],"length":16704,"saved":false}
{"ts":1353971087094,"patch":[[{"diffs":[[0," in given locale"],[-1,"s"],[0," with given capa"]],"start1":8656,"start2":8656,"length1":33,"length2":32}]],"length":16703,"saved":false}
{"ts":1353971089143,"patch":[[{"diffs":[[0," in given locale"],[-1,"s"],[0," with given inte"]],"start1":8147,"start2":8147,"length1":33,"length2":32}]],"length":16702,"saved":false}
{"ts":1353971096400,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[1,"uint8"],[0,"\r\n}\r\n\r\n/"]],"start1":9251,"start2":9251,"length1":35,"length2":21}]],"length":16688,"saved":false}
{"ts":1353971098497,"patch":[[{"diffs":[[0,"   uint8"],[1," i ="],[0,"\r\n}\r\n\r\n/"]],"start1":9256,"start2":9256,"length1":16,"length2":20}]],"length":16692,"saved":false}
{"ts":1353971099966,"patch":[[{"diffs":[[0,"int8 i ="],[1," 0, "],[0,"\r\n}\r\n\r\n/"]],"start1":9260,"start2":9260,"length1":16,"length2":20}]],"length":16696,"saved":false}
{"ts":1353971100670,"patch":[[{"diffs":[[0," i = 0, "],[1,"re"],[0,"\r\n}\r\n\r\n/"]],"start1":9264,"start2":9264,"length1":16,"length2":18}]],"length":16698,"saved":false}
{"ts":1353971102588,"patch":[[{"diffs":[[0," = 0, re"],[1,"sult = 0;"],[0,"\r\n}\r\n\r\n/"]],"start1":9266,"start2":9266,"length1":16,"length2":25}]],"length":16707,"saved":false}
{"ts":1353971106715,"patch":[[{"diffs":[[0,"t = 0;\r\n"],[1,"    \r\n    fp\r\n"],[0,"}\r\n\r\n// "]],"start1":9277,"start2":9277,"length1":16,"length2":30}]],"length":16721,"saved":false}
{"ts":1353971107538,"patch":[[{"diffs":[[0," \r\n    f"],[-1,"p"],[1,"o"],[0,"\r\n}\r\n\r\n/"]],"start1":9288,"start2":9288,"length1":17,"length2":17}]],"length":16721,"saved":false}
{"ts":1353971108504,"patch":[[{"diffs":[[0,"\r\n    fo"],[1,"r ()"],[0,"\r\n}\r\n\r\n/"]],"start1":9289,"start2":9289,"length1":16,"length2":20}]],"length":16725,"saved":false}
{"ts":1353971109321,"patch":[[{"diffs":[[0,"   for ("],[1,"o"],[0,")\r\n}\r\n\r\n"]],"start1":9292,"start2":9292,"length1":16,"length2":17}]],"length":16726,"saved":false}
{"ts":1353971110097,"patch":[[{"diffs":[[0,"   for ("],[-1,"o"],[0,")\r\n}\r\n\r\n"]],"start1":9292,"start2":9292,"length1":17,"length2":16}]],"length":16725,"saved":false}
{"ts":1353971110763,"patch":[[{"diffs":[[0,"   for ("],[1,"i"],[0,")\r\n}\r\n\r\n"]],"start1":9292,"start2":9292,"length1":16,"length2":17}]],"length":16726,"saved":false}
{"ts":1353971112921,"patch":[[{"diffs":[[0,"  for (i"],[1," = 0; i"],[0,")\r\n}\r\n\r\n"]],"start1":9293,"start2":9293,"length1":16,"length2":23}]],"length":16733,"saved":false}
{"ts":1353971113590,"patch":[[{"diffs":[[0,"i = 0; i"],[1," < "],[0,")\r\n}\r\n\r\n"]],"start1":9300,"start2":9300,"length1":16,"length2":19}]],"length":16736,"saved":false}
{"ts":1353971115780,"patch":[[{"diffs":[[0," 0; i < "],[1,"<"],[0,")\r\n}\r\n\r\n"]],"start1":9303,"start2":9303,"length1":16,"length2":17}]],"length":16737,"saved":false}
{"ts":1353971116659,"patch":[[{"diffs":[[0," 0; i < "],[-1,"<"],[0,")\r\n}\r\n\r\n"]],"start1":9303,"start2":9303,"length1":17,"length2":16}]],"length":16736,"saved":false}
{"ts":1353971120122,"patch":[[{"diffs":[[0," 0; i < "],[1,"MY_ADDRESS"],[0,")\r\n}\r\n\r\n"]],"start1":9303,"start2":9303,"length1":16,"length2":26}]],"length":16746,"saved":false}
{"ts":1353971122037,"patch":[[{"diffs":[[0," 0; i < "],[-1,"MY_ADDRESS"],[0,")\r\n}\r\n\r\n"]],"start1":9303,"start2":9303,"length1":26,"length2":16}]],"length":16736,"saved":false}
{"ts":1353971124612,"patch":[[{"diffs":[[0," 0; i < "],[1,"num"],[0,")\r\n}\r\n\r\n"]],"start1":9303,"start2":9303,"length1":16,"length2":19}]],"length":16739,"saved":false}
{"ts":1353971128978,"patch":[[{"diffs":[[0," i < num"],[1,"Interests"],[0,")\r\n}\r\n\r\n"]],"start1":9306,"start2":9306,"length1":16,"length2":25}]],"length":16748,"saved":false}
{"ts":1353971147194,"patch":[[{"diffs":[[0,"nterests"],[1,"; i++"],[0,")\r\n}\r\n\r\n"]],"start1":9315,"start2":9315,"length1":16,"length2":21}]],"length":16753,"saved":false}
{"ts":1353971148896,"patch":[[{"diffs":[[0,"; i++)\r\n"],[1,"    {\r\n        \r\n        \r\n    }\r\n"],[0,"}\r\n\r\n// "]],"start1":9323,"start2":9323,"length1":16,"length2":50}]],"length":16787,"saved":false}
{"ts":1353971150501,"patch":[[{"diffs":[[0,"       \r\n    }\r\n"],[1,"    \r\n    \r\n"],[0,"}\r\n\r\n// Returns "]],"start1":9349,"start2":9349,"length1":32,"length2":44}]],"length":16799,"saved":false}
{"ts":1353971151153,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"ret"],[0,"\r\n}\r\n\r\n// Re"]],"start1":9363,"start2":9363,"length1":24,"length2":27}]],"length":16802,"saved":false}
{"ts":1353971152916,"patch":[[{"diffs":[[0,"\n    ret"],[1,"urn result;"],[0,"\r\n}\r\n\r\n/"]],"start1":9370,"start2":9370,"length1":16,"length2":27}]],"length":16813,"saved":false}
{"ts":1353971155893,"patch":[[{"diffs":[[0,"\n    {\r\n        "],[1,"if "],[0,"\r\n        \r\n    "]],"start1":9330,"start2":9330,"length1":32,"length2":35}]],"length":16816,"saved":false}
{"ts":1353971163868,"patch":[[{"diffs":[[0,"        "],[-1,"if "],[1,"fo"],[0,"\r\n      "]],"start1":9338,"start2":9338,"length1":19,"length2":18}]],"length":16815,"saved":false}
{"ts":1353971164897,"patch":[[{"diffs":[[0,"      fo"],[1,"r "],[0,"\r\n      "]],"start1":9340,"start2":9340,"length1":16,"length2":18}]],"length":16817,"saved":false}
{"ts":1353971166097,"patch":[[{"diffs":[[0,"    for "],[1,"()"],[0,"\r\n      "]],"start1":9342,"start2":9342,"length1":16,"length2":18}]],"length":16819,"saved":false}
{"ts":1353971168202,"patch":[[{"diffs":[[0,"   for ("],[1,"k = 0; "],[0,")\r\n     "]],"start1":9343,"start2":9343,"length1":16,"length2":23}]],"length":16826,"saved":false}
{"ts":1353971169548,"patch":[[{"diffs":[[0," (k = 0;"],[1," k <"],[0," )\r\n    "]],"start1":9349,"start2":9349,"length1":16,"length2":20}]],"length":16830,"saved":false}
{"ts":1353971175990,"patch":[[{"diffs":[[0," 0; k < "],[1,"MY_ADDRESS_BOOK_LENGTH"],[0,")\r\n     "]],"start1":9354,"start2":9354,"length1":16,"length2":38}]],"length":16852,"saved":false}
{"ts":1353971177152,"patch":[[{"diffs":[[0,"K_LENGTH"],[1,"; k"],[0,")\r\n     "]],"start1":9376,"start2":9376,"length1":16,"length2":19}]],"length":16855,"saved":false}
{"ts":1353971178403,"patch":[[{"diffs":[[0,"ENGTH; k"],[-1,")"],[1,"++)\r\n        "],[0,"\r\n      "]],"start1":9379,"start2":9379,"length1":17,"length2":29}]],"length":16867,"saved":false}
{"ts":1353971179709,"patch":[[{"diffs":[[0,"; k++)\r\n        "],[1,"{\r\n            \r\n            \r\n        }"],[0,"\r\n        \r\n    "]],"start1":9384,"start2":9384,"length1":32,"length2":72}]],"length":16907,"saved":false}
{"ts":1353971185025,"patch":[[{"diffs":[[0,"    uint8 i = 0,"],[1," k = 0,"],[0," result = 0;\r\n  "]],"start1":9255,"start2":9255,"length1":32,"length2":39}]],"length":16914,"saved":false}
{"ts":1353971190862,"patch":[[{"diffs":[[0," {\r\n            "],[1,"if "],[0,"\r\n            \r\n"]],"start1":9406,"start2":9406,"length1":32,"length2":35}]],"length":16917,"saved":false}
{"ts":1353971194504,"patch":[[{"diffs":[[0,"     if "],[1,"addressBook[k]"],[0,"\r\n      "]],"start1":9417,"start2":9417,"length1":16,"length2":30}]],"length":16931,"saved":false}
{"ts":1353971197614,"patch":[[{"diffs":[[0,"sBook[k]"],[1,"."],[0,"\r\n      "]],"start1":9431,"start2":9431,"length1":16,"length2":17}]],"length":16932,"saved":false}
{"ts":1353971200052,"patch":[[{"diffs":[[0,"Book[k]."],[1,"locale"],[0,"\r\n      "]],"start1":9432,"start2":9432,"length1":16,"length2":22}]],"length":16938,"saved":false}
{"ts":1353971202146,"patch":[[{"diffs":[[0,"].locale"],[1," = l"],[0,"\r\n      "]],"start1":9438,"start2":9438,"length1":16,"length2":20}]],"length":16942,"saved":false}
{"ts":1353971203647,"patch":[[{"diffs":[[0,"cale = l"],[1,"ocales[i]"],[0,"\r\n      "]],"start1":9442,"start2":9442,"length1":16,"length2":25}]],"length":16951,"saved":false}
{"ts":1353971206104,"patch":[[{"diffs":[[0,"cales[i]"],[1,")"],[0,"\r\n      "]],"start1":9451,"start2":9451,"length1":16,"length2":17}]],"length":16952,"saved":false}
{"ts":1353971208296,"patch":[[{"diffs":[[0,"         if "],[1,"("],[0,"addressBook["]],"start1":9413,"start2":9413,"length1":24,"length2":25}]],"length":16953,"saved":false}
{"ts":1353971209527,"patch":[[{"diffs":[[0,"\n            if "],[1,"("],[0,"(addressBook[k]."]],"start1":9409,"start2":9409,"length1":32,"length2":33}]],"length":16954,"saved":false}
{"ts":1353971213447,"patch":[[{"diffs":[[0,"ales[i])"],[1," & "],[0,"\r\n      "]],"start1":9454,"start2":9454,"length1":16,"length2":19}]],"length":16957,"saved":false}
{"ts":1353971214121,"patch":[[{"diffs":[[0,"i]) "],[-1,"& "],[0,"\r\n  "]],"start1":9459,"start2":9459,"length1":10,"length2":8}]],"length":16955,"saved":false}
{"ts":1353971214994,"patch":[[{"diffs":[[0,"ales[i])"],[-1," "],[0,"\r\n      "]],"start1":9454,"start2":9454,"length1":17,"length2":16}]],"length":16954,"saved":false}
{"ts":1353971216782,"patch":[[{"diffs":[[0,"     if "],[-1,"("],[0,"(address"]],"start1":9417,"start2":9417,"length1":17,"length2":16}]],"length":16953,"saved":false}
{"ts":1353971218651,"patch":[[{"diffs":[[0,"ocales[i])\r\n"],[1,"            {\r\n                \r\n                \r\n            }\r\n"],[0,"            "]],"start1":9451,"start2":9451,"length1":24,"length2":90}]],"length":17019,"saved":false}
{"ts":1353971220340,"patch":[[{"diffs":[[0,"                "],[1,"if ()"],[0,"\r\n              "]],"start1":9478,"start2":9478,"length1":32,"length2":37}]],"length":17024,"saved":false}
{"ts":1353971222809,"patch":[[{"diffs":[[0,"    if ("],[1,"addressBook[]"],[0,")\r\n     "]],"start1":9490,"start2":9490,"length1":16,"length2":29}]],"length":17037,"saved":false}
{"ts":1353971223491,"patch":[[{"diffs":[[0,"essBook["],[1,"k"],[0,"])\r\n    "]],"start1":9502,"start2":9502,"length1":16,"length2":17}]],"length":17038,"saved":false}
{"ts":1353971224174,"patch":[[{"diffs":[[0,"sBook[k]"],[1,"."],[0,")\r\n     "]],"start1":9504,"start2":9504,"length1":16,"length2":17}]],"length":17039,"saved":false}
{"ts":1353971226214,"patch":[[{"diffs":[[0,"Book[k]."],[1,"int"],[0,")\r\n     "]],"start1":9505,"start2":9505,"length1":16,"length2":19}]],"length":17042,"saved":false}
{"ts":1353971235877,"patch":[[{"diffs":[[0,"    "],[-1,"if (addressBook[k].int)"],[0,"\r\n  "]],"start1":9490,"start2":9490,"length1":31,"length2":8}]],"length":17019,"saved":false}
{"ts":1353971243244,"patch":[[{"diffs":[[0," = 0, k = 0,"],[1," j=,"],[0," result = 0;"]],"start1":9266,"start2":9266,"length1":24,"length2":28}]],"length":17023,"saved":false}
{"ts":1353971244063,"patch":[[{"diffs":[[0,"k = 0, j"],[-1,"="],[1," "],[0,", result"]],"start1":9272,"start2":9272,"length1":17,"length2":17}]],"length":17023,"saved":false}
{"ts":1353971245828,"patch":[[{"diffs":[[0," = 0, j "],[1,"= 0"],[0,", result"]],"start1":9273,"start2":9273,"length1":16,"length2":19}]],"length":17026,"saved":false}
{"ts":1353971252163,"patch":[[{"diffs":[[0,"                "],[1,"for "],[0,"\r\n              "]],"start1":9485,"start2":9485,"length1":32,"length2":36}]],"length":17030,"saved":false}
{"ts":1353971254432,"patch":[[{"diffs":[[0,"    for "],[1,"(j = 0)"],[0,"\r\n      "]],"start1":9497,"start2":9497,"length1":16,"length2":23}]],"length":17037,"saved":false}
{"ts":1353971256667,"patch":[[{"diffs":[[0,"r (j = 0"],[1,"; j < "],[0,")\r\n     "]],"start1":9503,"start2":9503,"length1":16,"length2":22}]],"length":17043,"saved":false}
{"ts":1353971258897,"patch":[[{"diffs":[[0," 0; j < "],[1,"num"],[0,")\r\n     "]],"start1":9509,"start2":9509,"length1":16,"length2":19}]],"length":17046,"saved":false}
{"ts":1353971265868,"patch":[[{"diffs":[[0," 0; j < "],[-1,"num"],[1,"addressBook"],[0,")\r\n     "]],"start1":9509,"start2":9509,"length1":19,"length2":27}]],"length":17054,"saved":false}
{"ts":1353971266937,"patch":[[{"diffs":[[0,"ressBook"],[1,"[k]"],[0,")\r\n     "]],"start1":9520,"start2":9520,"length1":16,"length2":19}]],"length":17057,"saved":false}
{"ts":1353971267652,"patch":[[{"diffs":[[0,"sBook[k]"],[1,"."],[0,")\r\n     "]],"start1":9523,"start2":9523,"length1":16,"length2":17}]],"length":17058,"saved":false}
{"ts":1353971268427,"patch":[[{"diffs":[[0,"Book[k]."],[1,"num"],[0,")\r\n     "]],"start1":9524,"start2":9524,"length1":16,"length2":19}]],"length":17061,"saved":false}
{"ts":1353971271224,"patch":[[{"diffs":[[0,"k[k].num"],[1,"Interests"],[0,")\r\n     "]],"start1":9527,"start2":9527,"length1":16,"length2":25}]],"length":17070,"saved":false}
{"ts":1353971273728,"patch":[[{"diffs":[[0,"nterests"],[1,"; j++"],[0,")\r\n     "]],"start1":9536,"start2":9536,"length1":16,"length2":21}]],"length":17075,"saved":false}
{"ts":1353971275060,"patch":[[{"diffs":[[0,"nterests; j++)\r\n"],[1,"                {\r\n                    \r\n                }\r\n"],[0,"                "]],"start1":9536,"start2":9536,"length1":32,"length2":92}]],"length":17135,"saved":false}
{"ts":1353971275789,"patch":[[{"diffs":[[0,"              \r\n"],[1,"                    \r\n"],[0,"                "]],"start1":9577,"start2":9577,"length1":32,"length2":54}]],"length":17157,"saved":false}
{"ts":1353971321355,"patch":[[{"diffs":[[0,"                "],[1,"if ()"],[0,"\r\n              "]],"start1":9575,"start2":9575,"length1":32,"length2":37}]],"length":17162,"saved":false}
{"ts":1353971326900,"patch":[[{"diffs":[[0,"    if ("],[1,"addressBook[]"],[0,")\r\n     "]],"start1":9587,"start2":9587,"length1":16,"length2":29}]],"length":17175,"saved":false}
{"ts":1353971327891,"patch":[[{"diffs":[[0,"essBook["],[1,"j"],[0,"])\r\n    "]],"start1":9599,"start2":9599,"length1":16,"length2":17}]],"length":17176,"saved":false}
{"ts":1353971329888,"patch":[[{"diffs":[[0,"essBook["],[-1,"j]"],[0,")\r\n     "]],"start1":9599,"start2":9599,"length1":18,"length2":16}]],"length":17174,"saved":false}
{"ts":1353971330656,"patch":[[{"diffs":[[0,"essBook["],[1,"k"],[0,")\r\n     "]],"start1":9599,"start2":9599,"length1":16,"length2":17}]],"length":17175,"saved":false}
{"ts":1353971332585,"patch":[[{"diffs":[[0,"ssBook[k"],[1,"]"],[0,")\r\n     "]],"start1":9600,"start2":9600,"length1":16,"length2":17}]],"length":17176,"saved":false}
{"ts":1353971334657,"patch":[[{"diffs":[[0,"sBook[k]"],[1,".interest"],[0,")\r\n     "]],"start1":9601,"start2":9601,"length1":16,"length2":25}]],"length":17185,"saved":false}
{"ts":1353971335401,"patch":[[{"diffs":[[0,"Book[k].interest"],[1,"s[]"],[0,")\r\n             "]],"start1":9602,"start2":9602,"length1":32,"length2":35}]],"length":17188,"saved":false}
{"ts":1353971340146,"patch":[[{"diffs":[[0,"terests["],[1,"k"],[0,"])\r\n    "]],"start1":9612,"start2":9612,"length1":16,"length2":17}]],"length":17189,"saved":false}
{"ts":1353971343218,"patch":[[{"diffs":[[0,"ok[k].interests["],[-1,"k]"],[0,")\r\n             "]],"start1":9604,"start2":9604,"length1":34,"length2":32}]],"length":17187,"saved":false}
{"ts":1353971344329,"patch":[[{"diffs":[[0,"terests["],[1,"j]"],[0,")\r\n     "]],"start1":9612,"start2":9612,"length1":16,"length2":18}]],"length":17189,"saved":false}
{"ts":1353971348790,"patch":[[{"diffs":[[0,"[k].interests[j]"],[1," "],[0,")\r\n             "]],"start1":9606,"start2":9606,"length1":32,"length2":33}]],"length":17190,"saved":false}
{"ts":1353971350396,"patch":[[{"diffs":[[0,"rests[j]"],[1," =="],[0," )\r\n    "]],"start1":9614,"start2":9614,"length1":16,"length2":19}]],"length":17193,"saved":false}
{"ts":1353971356147,"patch":[[{"diffs":[[0,"s[j] == "],[1,"interests"],[0,")\r\n     "]],"start1":9618,"start2":9618,"length1":16,"length2":25}]],"length":17202,"saved":false}
{"ts":1353971357228,"patch":[[{"diffs":[[0,"nterests"],[1,"[i]"],[0,")\r\n     "]],"start1":9627,"start2":9627,"length1":16,"length2":19}]],"length":17205,"saved":false}
{"ts":1353971359542,"patch":[[{"diffs":[[0,"erests[i])\r\n"],[1,"                    {\r\n                        \r\n                    }\r\n"],[0,"            "]],"start1":9629,"start2":9629,"length1":24,"length2":96}]],"length":17277,"saved":false}
{"ts":1353971362146,"patch":[[{"diffs":[[0,"             {\r\n"],[1,"                        r\r\n                        break;\r\n"],[0,"                "]],"start1":9648,"start2":9648,"length1":32,"length2":91}]],"length":17336,"saved":false}
{"ts":1353971363141,"patch":[[{"diffs":[[0,"       r"],[1,"esult"],[0,"\r\n      "]],"start1":9681,"start2":9681,"length1":16,"length2":21}]],"length":17341,"saved":false}
{"ts":1353971364767,"patch":[[{"diffs":[[0,"  result"],[1," += 1'"],[0,"\r\n      "]],"start1":9686,"start2":9686,"length1":16,"length2":22}]],"length":17347,"saved":false}
{"ts":1353971365798,"patch":[[{"diffs":[[0,"ult += 1"],[-1,"'"],[1,";"],[0,"\r\n      "]],"start1":9691,"start2":9691,"length1":17,"length2":17}]],"length":17347,"saved":false}
{"ts":1353971373644,"patch":[[{"diffs":[[0,"esult;\r\n"],[1,"    \r\n"],[0,"}\r\n\r\n// "]],"start1":9917,"start2":9917,"length1":16,"length2":22}]],"length":17353,"saved":false}
{"ts":1353971383907,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[1,"\r\n    uint8 i = 0, k = 0, j = 0, result = 0;\r\n    \r\n    for (i = 0; i < numInterests; i++)\r\n    {\r\n        for (k = 0; k < MY_ADDRESS_BOOK_LENGTH; k++)\r\n        {\r\n            if (addressBook[k].locale = locales[i])\r\n            {\r\n                for (j = 0; j < addressBook[k].numInterests; j++)\r\n                {\r\n                    if (addressBook[k].interests[j] == interests[i])\r\n                    {\r\n                        result += 1;\r\n                        break;\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    return result;\r\n    "],[0,"\r\n}\r\n   "]],"start1":10112,"start2":10112,"length1":35,"length2":692}]],"length":18010,"saved":false}
{"ts":1353971387160,"patch":[[{"diffs":[[0,"es)\r\n{\r\n"],[-1,"    \r\n"],[0,"    uint"]],"start1":10108,"start2":10108,"length1":22,"length2":16}]],"length":18004,"saved":false}
{"ts":1353971395650,"patch":[[{"diffs":[[0,"sBook[k].num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s; j++)\r\n   "]],"start1":10384,"start2":10384,"length1":32,"length2":35}]],"length":18007,"saved":false}
{"ts":1353971397972,"patch":[[{"diffs":[[0,"= 0; i < num"],[-1,"Interest"],[1,"Capabilitie"],[0,"s; i++)\r\n   "]],"start1":10177,"start2":10177,"length1":32,"length2":35}]],"length":18010,"saved":false}
{"ts":1353971409765,"patch":[[{"diffs":[[0,"ressBook[k]."],[-1,"interest"],[1,"capabilitie"],[0,"s[j] == inte"]],"start1":10465,"start2":10465,"length1":32,"length2":35}]],"length":18013,"saved":false}
{"ts":1353971410847,"patch":[[{"diffs":[[0,"ities[j] == "],[-1,"interest"],[1,"capabilitie"],[0,"s[i])\r\n     "]],"start1":10484,"start2":10484,"length1":32,"length2":35}]],"length":18016,"saved":false}
{"ts":1353971490866,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[1,"uint8 i = 0, k = 0, j = 0, result = 0;\r\n    \r\n    for (i = 0; i < numInterests; i++)\r\n    {\r\n        for (k = 0; k < MY_ADDRESS_BOOK_LENGTH; k++)\r\n        {\r\n            if (addressBook[k].locale = locales[i])\r\n            {\r\n                for (j = 0; j < addressBook[k].numInterests; j++)\r\n                {\r\n                    if (addressBook[k].interests[j] == interests[i])\r\n                    {\r\n                        result += 1;\r\n                        break;\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n}\r\n\r\nv"]],"start1":15312,"start2":15312,"length1":35,"length2":654}]],"length":18635,"saved":false}
{"ts":1353971495207,"patch":[[{"diffs":[[0,", k = 0, j ="],[-1," 0, result ="],[0," 0;\r\n    \r\n "]],"start1":15331,"start2":15331,"length1":36,"length2":24}]],"length":18623,"saved":false}
{"ts":1353971509775,"patch":[[{"diffs":[[0," 0, k = 0, j = 0"],[1,", "],[0,";\r\n    \r\n    for"]],"start1":15329,"start2":15329,"length1":32,"length2":34}]],"length":18625,"saved":false}
{"ts":1353971512693,"patch":[[{"diffs":[[0," j = 0, "],[1,"numNodes = 0"],[0,";\r\n    \r"]],"start1":15339,"start2":15339,"length1":16,"length2":28}]],"length":18637,"saved":false}
{"ts":1353971517710,"patch":[[{"diffs":[[0,"                "],[-1,"result"],[1,"numNodes"],[0," += 1;\r\n        "]],"start1":15735,"start2":15735,"length1":38,"length2":40}]],"length":18639,"saved":false}
{"ts":1353971518654,"patch":[[{"diffs":[[0,"             {\r\n"],[1,"                        \r\n"],[0,"                "]],"start1":15711,"start2":15711,"length1":32,"length2":58}]],"length":18665,"saved":false}
{"ts":1353971519530,"patch":[[{"diffs":[[0,"              \r\n"],[1,"                        \r\n"],[0,"                "]],"start1":15737,"start2":15737,"length1":32,"length2":58}]],"length":18691,"saved":false}
{"ts":1353971525486,"patch":[[{"diffs":[[0,"                "],[1,"networkAdres"],[0,"\r\n              "]],"start1":15735,"start2":15735,"length1":32,"length2":44}]],"length":18703,"saved":false}
{"ts":1353971526685,"patch":[[{"diffs":[[0,"orkAdres"],[1,"ses"],[0,"\r\n      "]],"start1":15755,"start2":15755,"length1":16,"length2":19}]],"length":18706,"saved":false}
{"ts":1353971527584,"patch":[[{"diffs":[[0,"Adresses"],[1,"[]"],[0,"\r\n      "]],"start1":15758,"start2":15758,"length1":16,"length2":18}]],"length":18708,"saved":false}
{"ts":1353971529682,"patch":[[{"diffs":[[0,"dresses["],[1,"numNodes"],[0,"]\r\n     "]],"start1":15759,"start2":15759,"length1":16,"length2":24}]],"length":18716,"saved":false}
{"ts":1353971531902,"patch":[[{"diffs":[[0,"umNodes]"],[1," = "],[0,"\r\n      "]],"start1":15768,"start2":15768,"length1":16,"length2":19}]],"length":18719,"saved":false}
{"ts":1353971534933,"patch":[[{"diffs":[[0,"odes] = "],[1,"address"],[0,"\r\n      "]],"start1":15771,"start2":15771,"length1":16,"length2":23}]],"length":18726,"saved":false}
{"ts":1353971535737,"patch":[[{"diffs":[[0," address"],[1,"B"],[0,"\r\n      "]],"start1":15778,"start2":15778,"length1":16,"length2":17}]],"length":18727,"saved":false}
{"ts":1353971537985,"patch":[[{"diffs":[[0,"addressB"],[1,"pp"],[0,"\r\n      "]],"start1":15779,"start2":15779,"length1":16,"length2":18}]],"length":18729,"saved":false}
{"ts":1353971541234,"patch":[[{"diffs":[[0,"essB"],[-1,"pp"],[1,"ook[]"],[0,"\r\n  "]],"start1":15783,"start2":15783,"length1":10,"length2":13}]],"length":18732,"saved":false}
{"ts":1353971542119,"patch":[[{"diffs":[[0,"essBook["],[1,"k"],[0,"]\r\n     "]],"start1":15783,"start2":15783,"length1":16,"length2":17}]],"length":18733,"saved":false}
{"ts":1353971543843,"patch":[[{"diffs":[[0,"sBook[k]"],[1,".n"],[0,"\r\n      "]],"start1":15785,"start2":15785,"length1":16,"length2":18}]],"length":18735,"saved":false}
{"ts":1353971546692,"patch":[[{"diffs":[[0,"ook[k].n"],[1,"etworkAddress"],[0,"\r\n      "]],"start1":15787,"start2":15787,"length1":16,"length2":29}]],"length":18748,"saved":false}
{"ts":1353971548795,"patch":[[{"diffs":[[0,"kAddress"],[1,";"],[0,"\r\n      "]],"start1":15800,"start2":15800,"length1":16,"length2":17}]],"length":18749,"saved":false}
{"ts":1353971554693,"patch":[[{"diffs":[[0,"   \r\n    }\r\n"],[1,"    \r\n"],[0,"}\r\n\r\nvoid no"]],"start1":16062,"start2":16062,"length1":24,"length2":30}]],"length":18755,"saved":false}
{"ts":1353971562066,"patch":[[{"diffs":[[0,"on.\r\n}\r\n"],[1,"\r\n"],[0,"void nod"]],"start1":15185,"start2":15185,"length1":16,"length2":18}]],"length":18757,"saved":false}
{"ts":1353971594181,"patch":[[{"diffs":[[0,"\n{\r\n    "],[-1,"// TODO: Write this"],[1,"uint8 i = 0, k = 0, j = 0, result = 0;\r\n    \r\n    for (i = 0; i < numCapabilities; i++)\r\n    {\r\n        for (k = 0; k < MY_ADDRESS_BOOK_LENGTH; k++)\r\n        {\r\n            if (addressBook[k].locale = locales[i])\r\n            {\r\n                for (j = 0; j < addressBook[k].numCapabilities; j++)\r\n                {\r\n                    if (addressBook[k].capabilities[j] == capabilities[i])\r\n                    {\r\n                        result += 1;\r\n                        break;\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }"],[0,"\r\n}\r\n\r\n/"]],"start1":16215,"start2":16215,"length1":35,"length2":666}]],"length":19388,"saved":false}
{"ts":1353971596609,"patch":[[{"diffs":[[0,"       \r\n    }\r\n"],[1,"    \r\n"],[0,"}\r\n\r\n// Returns "]],"start1":16859,"start2":16859,"length1":32,"length2":38}]],"length":19394,"saved":false}
{"ts":1353971607704,"patch":[[{"diffs":[[0,"                "],[-1,"result"],[1,"networkAdresses[numNodes] = addressBook[k].networkAddress;\r\n                        \r\n                        numNodes"],[0," += 1;\r\n        "]],"start1":16648,"start2":16648,"length1":38,"length2":150}]],"length":19506,"saved":false}
{"ts":1353971620096,"patch":[[{"diffs":[[0,", k = 0, j = 0, "],[-1,"result"],[1,"numNodes"],[0," = 0;\r\n    \r\n   "]],"start1":16234,"start2":16234,"length1":38,"length2":40}]],"length":19508,"saved":false}
